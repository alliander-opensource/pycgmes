[tool.poetry]
name = "pycgmes"
# Note that trying to reupload the same version will fail.
version = "0.1.2"
description = "Python dataclasses for CGMES 3.0.0"
authors = ["uno <uno@alliander.com>"]
readme = "README.md"
repository = "https://github.com/Alliander/cgmes-python"
license = "Could be open source, right? I like MIT."
classifiers = [
    # I had fun going through https://pypi.org/classifiers/
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "Framework :: AWS CDK :: 2",
    "Framework :: FastAPI",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.9",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
    # "License :: OSI Approved :: MIT License",
]
# Because the standard structure (packagename) is used, it is not needed to give
# a package configuration entry.

[tool.poetry.dependencies]
python = "^3.10"
poetry = ">=1.5.0" # key 'priority' in source
pydantic = "*" # Used for dataclasses

[tool.poetry.group.dev.dependencies]
bandit = { extras = ["toml"], version = "*" } # Security checks
black = "*" # Formatter
coverage = { extras = ["toml"], version = "*" } # unit test coverage
mypy = "*" # Type checker
ruff = "*" # Linter/fixer. Replaces isort and autoflake, eventually probably pylint as well.
pylint = "*" # Linter
pytest = "*"
SCons = "*" # Command runner

# yes, the double [[]] is required
[[tool.poetry.source]]
# Note that poetry treats repositories to which you publish packages as user specific and not project specific
# configuration. So this config is niet enough to push.
# You'll need to run poetry config repositories.internal-uno https://nexus.appx.cloud/repository/uno/simple
name = "internal-cloud"
url = "https://nexus.appx.cloud/repository/cloud-team/simple"
priority = "explicit" # Means that it needs to be explicitely mentioned to be used.

[[tool.poetry.source]]
name = "PyPI"
priority = "primary" # Means it is the first source tried.

[tool.black]
line-length = 120

[tool.coverage.run]
# Coverage is here by default, but not going to uniot test 500+ generated classes. So mostly useless.
include = ["pycgmes/*"]
omit = []

[tool.coverage.report]
# Low coverage. Should split between dataclasses (won't be fully covered) and
# the rest (should be well covered).
fail_under = 70
exclude_also = [ # Regexp of lines (or first line of block) which do not count for coverage.
    # __main__ block is never tested.
    "if __name__ == .__main__.:",
]

[tool.mypy]
ignore_missing_imports = true
no_implicit_optional = true # Need an explicit None to be optional
show_error_codes = true
show_column_numbers = true
pretty = true
non_interactive = true # Do not ask for confirmations to install stubs
install_types = true # Install stubs if required
check_untyped_defs = true # Checks what it can even in files without annotation

[tool.bandit]
targets = ["pycgmes"]
exclude_dirs = ["tests", "SConstruct.py"]
skips = [
    "B101" # assert_used
]

[tool.pylint.messages_control]
max-line-length = 120
disable = [
    "duplicate-code", # pylint is too sensitive and got it wrong more often than not
    "logging-fstring-interpolation", # Let's keep fstrings for consistency
    "method-cache-max-size-none", # I want to be able to use @cache
    "missing-function-docstring",
    "missing-module-docstring",
    "no-else-continue", # if ... continue else something should be accepted
    "no-else-raise", # if ... raise else something should be accepted
    "no-else-return", # if ... return else return should be accepted.
    "too-many-instance-attributes",  # Not relevant for dataclasses.
    "unsubscriptable-object", # https://github.com/PyCQA/pylint/issues/3637,
    # Above are generic stuff.
    # Below are cimgen specific stuff.
    "invalid-name", # We follow the CIM naming convention, not python.
    "similarities", # Most dataclasses are the same, ignore similarities.
    "too-many-ancestors", # The tree of parent can be big but we have no control over it.
    "too-many-instance-attributes", # Dataclasses can have a lot of attributes.
]


[tool.pylint.similarities]
# Ignore imports when computing similarities. They create a lot of false positives because of
# typing, were the imports look a lot like each other across many files.
ignore-imports = "yes"

[tool.pylint.miscellaneous]
# Notes which will generate a warning from pylint. TODO for instance will not.
notes = "FIXME"

[tool.pylint.master]
# Tell pylint to add the directory where this file is as pythonpath. Not ideal, but it seems to work nicely, on cli and vscode.
init-hook = "from pylint.config import find_default_config_files; import os, sys; sys.path.append(os.path.dirname(list(find_default_config_files())[-1])); sys.path.append('./pycgmes/lambdas')"

[tool.ruff]
line-length = 120
# Group violations by containing file.
format = "grouped"

[tool.pytest.ini_options]
addopts = ["--import-mode=importlib",] # modern way to import tests
pythonpath = ["."] # Allows from pycgmes import in the tests, which is easier for the IDE.


[build-system]
# Used for building package from poetry. Present by default, not actually used.
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
