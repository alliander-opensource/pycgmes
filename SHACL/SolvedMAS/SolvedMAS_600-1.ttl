@base          <http://iec.ch/TC57/ns/CIM/SolvedMAS/constraints/IEC61970-600/3.0> .
@prefix eu:    <http://iec.ch/TC57/CIM100-European#> .
@prefix cims:  <http://iec.ch/TC57/1999/rdf-schema-extensions-19990926#> .
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix owl:   <http://www.w3.org/2002/07/owl#> .
@prefix sh:    <http://www.w3.org/ns/shacl#> .
@prefix cim:   <http://iec.ch/TC57/CIM100#> .
@prefix sm600:  <http://iec.ch/TC57/ns/CIM/SolvedMAS/constraints/IEC61970-600/3.0#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix dash:  <http://datashapes.org/dash#> .
@prefix dct:    <http://purl.org/dc/terms/> .
@prefix dcat:    <http://www.w3.org/ns/dcat#> .

sm600:Ontology  rdf:type         owl:Ontology ;
        dct:conformsTo        "urn:iso:std:iec:61970-501:draft:ed-2" , "urn:iso:std:iec:61970-600-2:ed-1" , "urn:iso:std:iec:61970-301:ed-7:amd1" , "file://iec61970cim17v40_iec61968cim13v13a_iec62325cim03v17a.eap" ;
        dct:creator           "ENTSO-E CIM EG"@en ;
        dct:description       "The constraints for solved MAS from IEC 61970-600-1."@en ;
        dct:identifier        "urn:uuid:4fe80376-77d7-4309-bd6c-112878060174" ;
        dct:issued            "2021-10-19T12:09:21Z"^^xsd:dateTime ;
        dct:language          "en-GB" ;
        dct:modified          "2020-10-19"^^xsd:date ;
        dct:publisher         "ENTSO-E"@en ;
        dct:rights            "Copyright"@en ;
        dct:rightsHolder      "ENTSO-E"@en ;
        dct:title             "Solved MAS Constraints"@en ;
        owl:versionIRI        <http://iec.ch/TC57/ns/CIM/SolvedMAS/constraints/IEC61970-600/3.0> ;
        owl:versionInfo       "3.0.0"@en ;
        dcat:landingPage      "https://www.entsoe.eu/digital/cim/cim-for-grid-models-exchange/" ;
        dcat:theme            "constraints"@en .

cim:    
    a           owl:Ontology ;
    owl:imports sh: ;
    sh:declare [
        a sh:PrefixDeclaration ;
        sh:namespace "http://iec.ch/TC57/CIM100#"^^xsd:anyURI ;
        sh:prefix "cim" ;
    ] ;
    sh:declare [
        a sh:PrefixDeclaration ;
        sh:namespace "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xsd:anyURI ;
        sh:prefix "rdf" ;
    ] ;
    sh:declare [
        a sh:PrefixDeclaration ;
        sh:namespace "http://iec.ch/TC57/61970-552/ModelDescription/1#"^^xsd:anyURI ;
        sh:prefix "md" ;
    ] ;
    sh:declare [
        a sh:PrefixDeclaration ;
        sh:namespace "http://iec.ch/TC57/CIM100-European#"^^xsd:anyURI ;
        sh:prefix "eu" ;
    ] .

sm600:solvedMAS600Group
        a           sh:PropertyGroup ;
        rdfs:label  "SolvedMAS600" ;
        sh:order    0 .

sm600:DanglingReferences  a  sh:NodeShape ;
        sh:property     sm600:All-DanglingReferences;
        sh:targetNode   cim:DanglingReferences.
        #sh:target  
        #[
        #      a sh:SPARQLTarget ;
        #      sh:prefixes cim: ;
        #      sh:select """
        #        SELECT DISTINCT ?this
        #        WHERE {
        #          ?any ?p ?this .
        #          FILTER(!isLiteral(?this) && CONTAINS(str(?this),"_") &&
        #          !CONTAINS(str(?this),"FullModel") && !CONTAINS(str(?this),"DifferenceModel")).
        #        }
        #        """ ;
        #] . 

sm600:All-DanglingReferences
        a               sh:PropertyShape ;
        sh:sparql       sm600:All-DanglingReferencesSparql ;
        sh:path         rdf:type ;
        sh:description  "The CGMES requires that at the receiving end of the exchange all references in the instance files pointing to instance files from other profiles which are part of the exchange should be satisfied. Therefore, the complete set of instance files necessary for the grid model shall have fulfilled references (no dangling references are allowed)." ;
        sh:name         "C:600:ALL:NA:FBOD4" ;
        sh:group        sm600:solvedMAS600Group ;
        sh:order        1 ;
        sh:severity     sh:Violation .

sm600:All-DanglingReferencesSparql
		a         sh:SPARQLConstraint ;  
		sh:message "Dangling reference is present in the model. The ID of the class is: {?s}." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  DISTINCT $this ?value ?s 
			WHERE {
        #?s !(rdf:type | md:Model.DependentOn | md:Model.Supersedes) ?value .
        ?s !rdf:type ?value .
        BIND (str(?value) AS ?strvalue).
        #OPTIONAL{?s (!rdf:type)/rdf:type ?v} .
        #OPTIONAL{?value  rdf:type ?v}.
        
        #FILTER(!isLiteral(?value) && CONTAINS(str(?value),"_") &&
        #      !CONTAINS(str(?value),"FullModel") && !CONTAINS(str(?value),"DifferenceModel")).
        #FILTER(!isLiteral(?value) && !STRSTARTS(str(?value),"urn:uuid:") && (CONTAINS(str(?value),"#_") || STRLEN(STRAFTER(str(?value),"#"))<=1) &&
        #      !CONTAINS(str(?value),"FullModel") && !CONTAINS(str(?value),"DifferenceModel") ).  
        FILTER(isIRI(?value) && (CONTAINS(?strvalue,"#_") || STRSTARTS(?strvalue,"urn:uuid:") || STRENDS(?strvalue,"#"))).              
        #OPTIONAL{?value  rdf:type ?v}.
        #FILTER (!bound(?v) ).
        FILTER NOT EXISTS {?value rdf:type ?v }.
			}""" . 
        
#sm600:All-DanglingReferencesSparql
#		a         sh:SPARQLConstraint ;  
#		sh:message "Dangling reference is present in the model." ;
#		sh:prefixes cim: ;
#		sh:select """
#			SELECT  $this ?value
#			WHERE {
#        OPTIONAL {$this  rdf:type ?value}.
#        FILTER (!bound(?value)).
#			}""" . 
      
sm600:SvVoltage  a  sh:NodeShape ;
        sh:property     sm600:SvVoltage-SV__4 ;
        sh:targetClass  cim:TopologicalNode .  

sm600:SvVoltage-SV__4
        a               sh:PropertyShape ;
        sh:sparql       sm600:SvVoltage-SV__4Sparql ;
        sh:path         rdf:type ;
        sh:description  "All state variables shall be instantiated in the SV instance file (distribution) for all energized elements part of a TopologicalIsland independently of the regulating status of the elements (e.g. for a shunt compensator that is not regulating the SvShuntCompensatorSections.sections shall be the same as ShuntCompensator.sections). All instances shall be representing computed values obtained from a power flow calculation. For SvPowerFlow instances refer to profile constraint on the SvPowerFlow class." ;
        sh:name         "C:600:SV:SvVoltage:SV__4" ;
        sh:group        sm600:solvedMAS600Group ;
        sh:order        2 ;
        sh:severity     sh:Violation .
        
sm600:SvVoltage-SV__4Sparql
		a         sh:SPARQLConstraint ;  
		sh:message "SvVoltage is not instantiated for a TopologicalNode which is referenced by a TopologicalIsland." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this
			WHERE {
        $this  ^cim:TopologicalIsland.TopologicalNodes ?topologicalisland.
        #OPTIONAL {$this  ^cim:TopologicalIsland.TopologicalNodes ?topologicalisland}.
        OPTIONAL {$this  ^cim:SvVoltage.TopologicalNode ?svvoltage} .

        FILTER (!bound(?svvoltage)).
        #FILTER (bound(?topologicalisland) && !bound(?svvoltage)).
			}""" . 

sm600:SvSwitch  a  sh:NodeShape ;
        sh:property     sm600:SvSwitch-SV__4;
        sh:targetClass  cim:Switch, cim:Fuse, cim:GroundDisconnector, cim:Jumper, cim:Breaker, cim:DisconnectingCircuitBreaker, cim:LoadBreakSwitch, cim:Disconnector, cim:Cut .  

sm600:SvSwitch-SV__4
        a               sh:PropertyShape ;
        sh:sparql       sm600:SvSwitch-SV__4Sparql ;
        sh:path         rdf:type ;
        sh:description  "All state variables shall be instantiated in the SV instance file (distribution) for all energized elements part of a TopologicalIsland independently of the regulating status of the elements (e.g. for a shunt compensator that is not regulating the SvShuntCompensatorSections.sections shall be the same as ShuntCompensator.sections). All instances shall be representing computed values obtained from a power flow calculation. For SvPowerFlow instances refer to profile constraint on the SvPowerFlow class." ;
        sh:name         "C:600:SV:SvSwitch:SV__4" ;
        sh:group        sm600:solvedMAS600Group ;
        sh:order        3 ;
        sh:severity     sh:Violation .
        
sm600:SvSwitch-SV__4Sparql
		a         sh:SPARQLConstraint ;  
		sh:message "SvSwitch is not instantiated for a retained Switch (or any of the subtypes) connected to a TopologicalNode which is referenced by a TopologicalIsland." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  DISTINCT $this ?value 
			WHERE {
        $this ^cim:SvStatus.ConductingEquipment/cim:SvStatus.inService true .
        $this cim:Switch.retained true .
        $this rdf:type ?value .
        $this ^cim:Terminal.ConductingEquipment/cim:Terminal.ConnectivityNode/cim:ConnectivityNode.TopologicalNode/^cim:TopologicalIsland.TopologicalNodes ?topologicalisland.
        #OPTIONAL {$this ^cim:Terminal.ConductingEquipment/cim:Terminal.ConnectivityNode/cim:ConnectivityNode.TopologicalNode/^cim:TopologicalIsland.TopologicalNodes ?topologicalisland }.
        OPTIONAL {$this  ^cim:SvSwitch.Switch  ?svswitch} .
        #FILTER (bound(?topologicalisland) && !bound(?svswitch)  ).
        FILTER (!bound(?svswitch)  ).
			}""" . 

sm600:SvStatus  a  sh:NodeShape ;
        sh:property     sm600:SvStatus-SV__4;
        sh:targetClass   cim:TopologicalIsland.
        #sh:target  
        #[
        #      a sh:SPARQLTarget ;
        #      sh:prefixes cim: ;
        #      sh:select """
        #        SELECT ?this
        #        WHERE {
        #         ?term  cim:Terminal.ConductingEquipment  ?this.
        #         ?term  cim:ACDCTerminal.sequenceNumber 1.
        #
        #        }
        #        """ ;
        #] .  

sm600:SvStatus-SV__4
        a               sh:PropertyShape ;
        sh:sparql       sm600:SvStatus-SV__4Sparql ;
        sh:path         rdf:type ;
        sh:description  "All state variables shall be instantiated in the SV instance file (distribution) for all energized elements part of a TopologicalIsland independently of the regulating status of the elements (e.g. for a shunt compensator that is not regulating the SvShuntCompensatorSections.sections shall be the same as ShuntCompensator.sections). All instances shall be representing computed values obtained from a power flow calculation. For SvPowerFlow instances refer to profile constraint on the SvPowerFlow class." ;
        sh:name         "C:600:SV:SvStatus:SV__4" ;
        sh:group        sm600:solvedMAS600Group ;
        sh:order        4 ;
        sh:severity     sh:Violation .
        
sm600:SvStatus-SV__4Sparql
		a         sh:SPARQLConstraint ;  
		sh:message "SvStatus is not instantiated for a ConductingEquipment connected to a TopologicalNode which is referenced by a TopologicalIsland." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  DISTINCT $this ?value 
			WHERE {
        $this cim:TopologicalIsland.TopologicalNodes ?tn.
        ?tn ^cim:ConnectivityNode.TopologicalNode/^cim:Terminal.ConnectivityNode/cim:Terminal.ConductingEquipment ?value.
        OPTIONAL {?value  ^cim:SvStatus.ConductingEquipment  ?svstatus} .
        #$this rdf:type ?value .
        #OPTIONAL {$this ^cim:Terminal.ConductingEquipment/cim:Terminal.ConnectivityNode/cim:ConnectivityNode.TopologicalNode/^cim:TopologicalIsland.TopologicalNodes ?topologicalisland }.
        #OPTIONAL {$this  ^cim:SvStatus.ConductingEquipment  ?svstatus} .
        #FILTER (bound(?topologicalisland) && !bound(?svstatus) && ?value!=cim:Equipment ).
        FILTER (!bound(?svstatus) && ?value!=cim:Equipment ).
			}""" . 

sm600:SvShuntCompensatorSections  a  sh:NodeShape ;
        sh:property     sm600:SvShuntCompensatorSections-SV__4 , sm600:SvShuntCompensatorSections.sections-SV__4;
        sh:targetClass  cim:LinearShuntCompensator, cim:NonlinearShuntCompensator .  

sm600:SvShuntCompensatorSections-SV__4
        a               sh:PropertyShape ;
        sh:sparql       sm600:SvShuntCompensatorSections-SV__4Sparql ;
        sh:path         rdf:type ;
        sh:description  "All state variables shall be instantiated in the SV instance file (distribution) for all energized elements part of a TopologicalIsland independently of the regulating status of the elements (e.g. for a shunt compensator that is not regulating the SvShuntCompensatorSections.sections shall be the same as ShuntCompensator.sections). All instances shall be representing computed values obtained from a power flow calculation. For SvPowerFlow instances refer to profile constraint on the SvPowerFlow class." ;
        sh:name         "C:600:SV:SvShuntCompensatorSections:SV__4" ;
        sh:group        sm600:solvedMAS600Group ;
        sh:order        5 ;
        sh:severity     sh:Violation .
        
sm600:SvShuntCompensatorSections-SV__4Sparql
		a         sh:SPARQLConstraint ;  
		sh:message "SvShuntCompensatorSections is not instantiated for a ShuntCompensator (or any of the subtypes) connected to a TopologicalNode which is referenced by a TopologicalIsland." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  DISTINCT $this ?value 
			WHERE {
        $this ^cim:SvStatus.ConductingEquipment/cim:SvStatus.inService true .
        $this ^cim:Terminal.ConductingEquipment/cim:Terminal.ConnectivityNode/cim:ConnectivityNode.TopologicalNode/^cim:TopologicalIsland.TopologicalNodes ?topologicalisland.
        $this rdf:type ?value .
        #OPTIONAL {$this ^cim:Terminal.ConductingEquipment/cim:Terminal.ConnectivityNode/cim:ConnectivityNode.TopologicalNode/^cim:TopologicalIsland.TopologicalNodes ?topologicalisland }.
        OPTIONAL {$this  ^cim:SvShuntCompensatorSections.ShuntCompensator  ?svshuntcompsec} .
        #FILTER (bound(?topologicalisland) && !bound(?svshuntcompsec)  ).
        FILTER (!bound(?svshuntcompsec)  ).
			}""" . 

sm600:SvTapStep  a  sh:NodeShape ;
        sh:property     sm600:SvTapStep-SV__4 , sm600:SvTapStep.position-SV__4;
        sh:targetClass  cim:RatioTapChanger, cim:PhaseTapChangerTabular , cim:PhaseTapChangerSymmetrical , cim:PhaseTapChangerAsymmetrical , cim:PhaseTapChangerLinear .  

sm600:SvTapStep-SV__4
        a               sh:PropertyShape ;
        sh:sparql       sm600:SvTapStep-SV__4Sparql ;
        sh:path         rdf:type ;
        sh:description  "All state variables shall be instantiated in the SV instance file (distribution) for all energized elements part of a TopologicalIsland independently of the regulating status of the elements (e.g. for a shunt compensator that is not regulating the SvShuntCompensatorSections.sections shall be the same as ShuntCompensator.sections). All instances shall be representing computed values obtained from a power flow calculation. For SvPowerFlow instances refer to profile constraint on the SvPowerFlow class." ;
        sh:name         "C:600:SV:SvTapStep:SV__4" ;
        sh:group        sm600:solvedMAS600Group ;
        sh:order        6 ;
        sh:severity     sh:Violation .
        
sm600:SvTapStep-SV__4Sparql
		a         sh:SPARQLConstraint ;  
		sh:message "SvTapStep is not instantiated for a RatioTapChanger or PhaseTapChanger (or any of the subtypes)  connected to a TopologicalNode which is referenced by a TopologicalIsland." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  DISTINCT $this ?value 
			WHERE {
        $this (cim:RatioTapChanger.TransformerEnd/cim:TransformerEnd.PowerTransformer/^cim:SvStatus.ConductingEquipment/cim:SvStatus.inService)|(cim:PhaseTapChanger.TransformerEnd/cim:TransformerEnd.PowerTransformer/^cim:SvStatus.ConductingEquipment/cim:SvStatus.inService) true .
        $this  (cim:RatioTapChanger.TransformerEnd/cim:TransformerEnd.Terminal/cim:Terminal.ConnectivityNode/cim:ConnectivityNode.TopologicalNode/^cim:TopologicalIsland.TopologicalNodes)|(cim:PhaseTapChanger.TransformerEnd/cim:TransformerEnd.Terminal/cim:Terminal.ConnectivityNode/cim:ConnectivityNode.TopologicalNode/^cim:TopologicalIsland.TopologicalNodes)  ?topologicalisland .
        $this rdf:type ?value .
        #OPTIONAL {$this cim:RatioTapChanger.TransformerEnd/cim:TransformerEnd.Terminal/cim:Terminal.ConnectivityNode/cim:ConnectivityNode.TopologicalNode/^cim:TopologicalIsland.TopologicalNodes ?topologicalisland }.
        #OPTIONAL {$this cim:PhaseTapChanger.TransformerEnd/cim:TransformerEnd.Terminal/cim:Terminal.ConnectivityNode/cim:ConnectivityNode.TopologicalNode/^cim:TopologicalIsland.TopologicalNodes ?topologicalisland }.
        OPTIONAL {$this  ^cim:SvTapStep.TapChanger  ?svtapstep} .
        #FILTER (bound(?topologicalisland) && !bound(?svtapstep)  ).
        FILTER (!bound(?svtapstep)  ).
			}""" . 

sm600:SvTapStep.position-SV__4
        a               sh:PropertyShape ;
        sh:sparql       sm600:SvTapStep.position-SV__4Sparql ;
        sh:description  "All state variables shall be instantiated in the SV instance file (distribution) for all energized elements part of a TopologicalIsland independently of the regulating status of the elements (e.g. for a shunt compensator that is not regulating the SvShuntCompensatorSections.sections shall be the same as ShuntCompensator.sections). All instances shall be representing computed values obtained from a power flow calculation. For SvPowerFlow instances refer to profile constraint on the SvPowerFlow class." ;
        sh:name         "C:600:SV:SvTapStep.position:SV__4" ;
        sh:group        sm600:solvedMAS600Group ;
        sh:path         cim:TapChanger.step ;
        sh:order        7 ;
        sh:severity     sh:Violation .
        
sm600:SvTapStep.position-SV__4Sparql
		a         sh:SPARQLConstraint ;  
		sh:message "SvTapStep.position is not the same as TapChanger.step for non-regulating TapChanger. SvTapStep.position is: {?svtapsteppos}; TapChanger.step is: {?value}." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  DISTINCT $this ?value ?svtapsteppos
			WHERE {
        $this (cim:RatioTapChanger.TransformerEnd/cim:TransformerEnd.PowerTransformer/^cim:SvStatus.ConductingEquipment/cim:SvStatus.inService)|(cim:PhaseTapChanger.TransformerEnd/cim:TransformerEnd.PowerTransformer/^cim:SvStatus.ConductingEquipment/cim:SvStatus.inService) true .
        $this cim:TapChanger.controlEnabled ?controlen .
        $this  ^cim:SvTapStep.TapChanger/cim:SvTapStep.position  ?svtapsteppos.
        $this $PATH ?value .
        OPTIONAL {$this  cim:TapChanger.TapChangerControl/cim:RegulatingControl.enabled ?rcenabled} .
        #OPTIONAL {$this  ^cim:SvTapStep.TapChanger/cim:SvTapStep.position  ?svtapsteppos} .
        #FILTER (bound(?svtapsteppos) && ((?controlen=false && ?svtapsteppos!=?value) || (bound(?rcenabled) && ?rcenabled=false && ?svtapsteppos!=?value) )  ).
        FILTER ((?controlen=false && ?svtapsteppos!=?value) || (bound(?rcenabled) && ?rcenabled=false && ?svtapsteppos!=?value)  ).
			}""" . 

sm600:SvShuntCompensatorSections.sections-SV__4
        a               sh:PropertyShape ;
        sh:sparql       sm600:SvShuntCompensatorSections.sections-SV__4Sparql ;
        sh:description  "All state variables shall be instantiated in the SV instance file (distribution) for all energized elements part of a TopologicalIsland independently of the regulating status of the elements (e.g. for a shunt compensator that is not regulating the SvShuntCompensatorSections.sections shall be the same as ShuntCompensator.sections). All instances shall be representing computed values obtained from a power flow calculation. For SvPowerFlow instances refer to profile constraint on the SvPowerFlow class." ;
        sh:name         "C:600:SV:SvShuntCompensatorSections.sections:SV__4" ;
        sh:group        sm600:solvedMAS600Group ;
        sh:path         cim:ShuntCompensator.sections ;
        sh:order        8 ;
        sh:severity     sh:Violation .
        
sm600:SvShuntCompensatorSections.sections-SV__4Sparql
		a         sh:SPARQLConstraint ;  
		sh:message "SvShuntCompensatorSections.sections is not the same as ShuntCompensator.sections for non-regulating ShuntCompensator. SvShuntCompensatorSections.sections is: {?svshuntsec}; ShuntCompensator.sections is: {?value}." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  DISTINCT $this ?value ?svshuntsec
			WHERE {
        $this ^cim:SvStatus.ConductingEquipment/cim:SvStatus.inService true .
        $this cim:RegulatingCondEq.controlEnabled ?controlen .
        $this  ^cim:SvShuntCompensatorSections.ShuntCompensator/cim:SvShuntCompensatorSections.sections  ?svshuntsec .
        $this $PATH ?value .
        OPTIONAL {$this  cim:RegulatingCondEq.RegulatingControl/cim:RegulatingControl.enabled ?rcenabled} .
        #OPTIONAL {$this  ^cim:SvShuntCompensatorSections.ShuntCompensator/cim:SvShuntCompensatorSections.sections  ?svshuntsec} .
        #FILTER (bound(?svshuntsec) && ((?controlen=false && ?svshuntsec!=?value) || (bound(?rcenabled) && ?rcenabled=false && ?svshuntsec!=?value) )  ).
        FILTER ((?controlen=false && ?svshuntsec!=?value) || (bound(?rcenabled) && ?rcenabled=false && ?svshuntsec!=?value)   ).
			}""" .





      
      
      
      
      
      
      
      
      
      
