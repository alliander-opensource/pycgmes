@base          <http://iec.ch/TC57/ns/CIM/StateVariable-EU/constraints/IEC61970-456/solved/3.0> .
@prefix eu:    <http://iec.ch/TC57/CIM100-European#> .
@prefix cims:  <http://iec.ch/TC57/1999/rdf-schema-extensions-19990926#> .
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix owl:   <http://www.w3.org/2002/07/owl#> .
@prefix sh:    <http://www.w3.org/ns/shacl#> .
@prefix cim:   <http://iec.ch/TC57/CIM100#> .
@prefix svs456:  <http://iec.ch/TC57/ns/CIM/StateVariable-EU/constraints/IEC61970-456/solved/3.0#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix dash:  <http://datashapes.org/dash#> .
@prefix dct:    <http://purl.org/dc/terms/> .
@prefix dcat:    <http://www.w3.org/ns/dcat#> .

svs456:Ontology  rdf:type         owl:Ontology ;
        dct:conformsTo        "urn:iso:std:iec:61970-501:draft:ed-2" , "urn:iso:std:iec:61970-600-2:ed-1" , "urn:iso:std:iec:61970-301:ed-7:amd1" , "file://iec61970cim17v40_iec61968cim13v13a_iec62325cim03v17a.eap" ;
        dct:creator           "ENTSO-E CIM EG"@en ;
        dct:description       "The constraints for SV from 456."@en ;
        dct:identifier        "urn:uuid:334daf4c-dd14-4d1b-94a2-0a69f0bbeba7" ;
        dct:issued            "2021-10-19T12:09:21Z"^^xsd:dateTime ;
        dct:language          "en-GB" ;
        dct:modified          "2020-10-19"^^xsd:date ;
        dct:publisher         "ENTSO-E"@en ;
        dct:rights            "Copyright"@en ;
        dct:rightsHolder      "ENTSO-E"@en ;
        dct:title             "SV solved MAS Constraints"@en ;
        owl:versionIRI        <http://iec.ch/TC57/ns/CIM/StateVariable-EU/constraints/IEC61970-456/solved/3.0> ;
        owl:versionInfo       "3.0.0"@en ;
        dcat:landingPage      "https://www.entsoe.eu/digital/cim/cim-for-grid-models-exchange/" ;
        dcat:theme            "constraints"@en .

cim:    
    a           owl:Ontology ;
    owl:imports sh: ;
    sh:declare [
        a sh:PrefixDeclaration ;
        sh:namespace "http://iec.ch/TC57/CIM100#"^^xsd:anyURI ;
        sh:prefix "cim" ;
    ] ;
    sh:declare [
        a sh:PrefixDeclaration ;
        sh:namespace "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xsd:anyURI ;
        sh:prefix "rdf" ;
    ] ;
    sh:declare [
        a sh:PrefixDeclaration ;
        sh:namespace "http://iec.ch/TC57/CIM100-European#"^^xsd:anyURI ;
        sh:prefix "eu" ;
    ] .

svs456:solved456
        a           sh:PropertyGroup ;
        rdfs:label  "SolvedMASSV456" ;
        sh:order    0 .

svs456:SvShuntCompensatorSections  a  sh:NodeShape ;
        sh:property     svs456:SvShuntCompensatorSections.sections-value;
        sh:targetClass  cim:SvShuntCompensatorSections.
 

svs456:SvShuntCompensatorSections.sections-value
        a               sh:PropertyShape ;
        sh:sparql       svs456:SvShuntCompensatorSections.sections-valueSparql ;
        sh:description  "In cases where RegulatingControl.discrete is true and RegulatingControl.enabled is true, SvShuntCompensatorSections.sections shall be integer." ;
        sh:name         "C:456:SV:SvShuntCompensatorSections.sections:value" ;
        sh:path         cim:SvShuntCompensatorSections.sections ;
        sh:group        svs456:solved456 ;
        sh:order        0 ;
        sh:severity     sh:Violation .
        
    
svs456:SvShuntCompensatorSections.sections-valueSparql
		a         sh:SPARQLConstraint ;  
		sh:message "The value is not integer for an active discrete regulating control." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value
			WHERE {
        $this $PATH ?value .
        $this cim:SvShuntCompensatorSections.ShuntCompensator/cim:RegulatingCondEq.RegulatingControl ?contr .
        #$this cim:SvShuntCompensatorSections.ShuntCompensator ?shuntcomp .
        #OPTIONAL {?shuntcomp cim:RegulatingCondEq.RegulatingControl ?contr}.
        #?contr cim:RegulatingControl.discrete ?discrete . 
        #?contr cim:RegulatingControl.enabled ?enabled .
        ?contr cim:RegulatingControl.enabled true .
        ?contr cim:RegulatingControl.discrete true . 
        FILTER (STRENDS(str(?value), ".") && !REGEX(STRAFTER(str(?value), "."), "^[0]$", "i") ) . 
        #FILTER (STRENDS(str(?value), ".") && !REGEX(STRAFTER(str(?value), "."), "^[0]$", "i")  && bound(?contr) && ?discrete=true && ?enabled=true) .          
			}""" .  
      
svs456:SvTapStep  a  sh:NodeShape ;
        sh:property     svs456:SvTapStep.position-value;
        sh:targetClass  cim:SvTapStep.
 

svs456:SvTapStep.position-value
        a               sh:PropertyShape ;
        sh:sparql       svs456:SvTapStep.position-valueSparql ;
        sh:description  "In cases where RegulatingControl.discrete is true and RegulatingControl.enabled is true, SvTapStep.position shall be integer." ;
        sh:name         "C:456:SV:SvTapStep.position:value" ;
        sh:path         cim:SvTapStep.position ;
        sh:group        svs456:solved456 ;
        sh:order        1 ;
        sh:severity     sh:Violation .
        
    
svs456:SvTapStep.position-valueSparql
		a         sh:SPARQLConstraint ;  
		sh:message "The value is not integer for an active discrete regulating control." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value
			WHERE {
        $this $PATH ?value .
        $this cim:SvTapStep.TapChanger/cim:TapChanger.TapChangerControl ?contr .
        #$this cim:SvTapStep.TapChanger ?tapchanger .
        #OPTIONAL {?tapchanger cim:TapChanger.TapChangerControl ?contr}.
        ?contr cim:RegulatingControl.enabled true .
        ?contr cim:RegulatingControl.discrete true . 
        FILTER (STRENDS(str(?value), ".") && !REGEX(STRAFTER(str(?value), "."), "^[0]$", "i")) . 
        #?contr cim:RegulatingControl.discrete ?discrete . 
        #?contr cim:RegulatingControl.enabled ?enabled .
        #FILTER (STRENDS(str(?value), ".") && !REGEX(STRAFTER(str(?value), "."), "^[0]$", "i")  && bound(?contr) && ?discrete=true && ?enabled=true) .        
			}""" .  
      
svs456:SvSwitch  a  sh:NodeShape ;
        sh:property     svs456:SvSwitch-instance;
        sh:targetClass  cim:Cut , cim:Switch , cim:Disconnector , cim:Fuse , cim:GroundDisconnector , cim:Jumper , cim:Breaker , cim:LoadBreakSwitch , cim:DisconnectingCircuitBreaker .
 

svs456:SvSwitch-instance
        a               sh:PropertyShape ;
        sh:sparql       svs456:SvSwitch-instanceSparql ;
        sh:path         rdf:type ;
        sh:description  "SvSwitch shall be exchanged for all switching devices. It is expected that in most cases the SvSwitch.open in SV instance data will be identical with Switch.open in SSH instance data. However, in cases where a regulating control is modifying the connection state of the controlled device a difference between SvSwitch.open and Switch.open can occur." ;
        sh:name         "C:456:SV:SvSwitch:instance" ;
        sh:group        svs456:solved456 ;
        sh:order        2 ;
        sh:severity     sh:Violation .
        
    
svs456:SvSwitch-instanceSparql
		a         sh:SPARQLConstraint ;  
		sh:message "SvSwitch not instantiated." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this
			WHERE {
        OPTIONAL {$this ^cim:SvSwitch.Switch ?svswitch } .
        FILTER (!bound(?svswitch)) .        
			}""" .  

svs456:SvPowerFlow  a  sh:NodeShape ;
        sh:property     svs456:SvPowerFlow-instance;
        sh:targetClass  cim:SynchronousMachine , cim:AsynchronousMachine , cim:StationSupply , cim:ConformLoad , cim:NonConformLoad , cim:EnergyConsumer , cim:EquivalentInjection , cim:LinearShuntCompensator , cim:NonlinearShuntCompensator , cim:StaticVarCompensator , cim:EnergySource , cim:ExternalNetworkInjection, cim:PowerElectronicsConnection.
        #sh:target  
        #[
        #      a sh:SPARQLTarget ;
        #      sh:prefixes cim: ;
        #      sh:select """
        #        SELECT ?this
        #        WHERE {
        #         ?this  ^cim:Terminal.ConductingEquipment  ?any.
        #         ?this rdf:type  ?type.
        #         FILTER (?type IN (cim:SynchronousMachine , cim:AsynchronousMachine , cim:StationSupply , cim:ConformLoad , cim:NonConformLoad , cim:EnergyConsumer , cim:EquivalentInjection , cim:LinearShuntCompensator , cim:NonlinearShuntCompensator , cim:StaticVarCompensator , cim:EnergySource , cim:ExternalNetworkInjection, cim:PowerElectronicsConnection)).
        #        }
        #        """ ;
        #] .  

svs456:SvPowerFlow-instance
        a               sh:PropertyShape ;
        sh:sparql       svs456:SvPowerFlow-instanceSparql ;
        sh:path         rdf:type ;
        sh:description  "As a minimum there shall be an instance of SvPowerFlow associated with the Terminal for all the following classes and their specialisation (subclass) that is part of an energized TopologicalIsland: RotatingMachine, EnergyConsumer, EquivalentInjection, ShuntCompensator, StaticVarCompensator, ExternalNetworkInjection, PowerElectronicsConnection and EnergySource. Additional instances of SvPowerFlow may optionally be available for other in service (SvStatus.inService=true) and energised equipment (equipment connected to a TopologicalNode part of the TopologicalIsland)." ;
        sh:name         "R:456:SV:SvPowerFlow:instance" ;
        sh:group        svs456:solved456 ;
        sh:order        3 ;
        sh:severity     sh:Violation .
        
svs456:SvPowerFlow-instanceSparql
		a         sh:SPARQLConstraint ;  
		sh:message "SvPowerFlow is not instantiated for the required instances of energized (SvStatus.inService=true and the connected ToplogicalNode is part of the TopologicalIsland) equipment." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value 
			WHERE {
        $this  ^cim:SvStatus.ConductingEquipment/cim:SvStatus.inService  true .
        $this ^cim:Terminal.ConductingEquipment/cim:Terminal.ConnectivityNode/cim:ConnectivityNode.TopologicalNode/^cim:TopologicalIsland.TopologicalNodes ?topologicalisland .
        $this rdf:type ?value .
        #OPTIONAL {$this ^cim:Terminal.ConductingEquipment/cim:Terminal.ConnectivityNode/cim:ConnectivityNode.TopologicalNode/^cim:TopologicalIsland.TopologicalNodes ?topologicalisland }.
        #OPTIONAL {$this  ^cim:SvStatus.ConductingEquipment/cim:SvStatus.inService  ?svstatus} .
        OPTIONAL {$this ^cim:Terminal.ConductingEquipment/^cim:SvPowerFlow.Terminal ?svpowerflow }.
        #FILTER (bound(?topologicalisland) && bound(?svstatus) && ?svstatus=true && !bound(?svpowerflow)).
        FILTER (!bound(?svpowerflow)).
			}""" . 
      
      
svs456:SvPowerFlow-SynchronousMachine  a  sh:NodeShape ;
        sh:property     svs456:SvPowerFlow.p-synchronousMachine , svs456:SvPowerFlow.q-synchronousMachine;
        sh:targetClass  cim:SynchronousMachine  .      
      
svs456:SvPowerFlow.p-synchronousMachine
        a               sh:PropertyShape ;
        sh:sparql       svs456:SvPowerFlow.p-synchronousMachineSparql ;
        sh:path         rdf:type ;
        sh:description  "The SvPowerFlow.p that is given by the steady state power flow solution for a SynchronousMachine shall normally be within the capability of the machine defined in the ReactiveCapabilityCurve or GeneratingUnit.maxOperatingP and GeneratingUnit.minOperatingP when ReactiveCapabilityCurve is not present. Active power can be outside the capability as part of start-up or shutdown of the generator. CIM cannot represent different operation mode so this constraint will only give a warning. Note that different data exchange processes can assign more restrictive severity depending on the business needs and power flow algorithm applied by the business process." ;
        sh:name         "C:456:SV:SvPowerFlow.p:synchronousMachine" ;
        sh:group        svs456:solved456 ;
        sh:order        4 ;
        sh:severity     sh:Warning .
        
svs456:SvPowerFlow.p-synchronousMachineSparql
		a         sh:SPARQLConstraint ;  
		sh:message "The value is outside of the range defined by the ReactiveCapabilityCurve or [GeneratingUnit.minOperatingP, GeneratingUnit.maxOperatingP] when the curve is not present." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value 
			WHERE {
        $this ^cim:Terminal.ConductingEquipment/^cim:SvPowerFlow.Terminal/cim:SvPowerFlow.p ?value .
        $this cim:RotatingMachine.GeneratingUnit ?gu .
        ?gu cim:GeneratingUnit.minOperatingP ?minp .
        ?gu cim:GeneratingUnit.maxOperatingP ?maxp .
        OPTIONAL {$this cim:SynchronousMachine.InitialReactiveCapabilityCurve ?rcc } .
               
        {
        SELECT $this (MAX(?xvalue) AS ?maxxvalue)  (MIN(?xvalue) AS ?minxvalue)
          WHERE {
            #OPTIONAL {?rcc1 ^cim:SynchronousMachine.InitialReactiveCapabilityCurve $this } .
            OPTIONAL {?rcc1 ^cim:SynchronousMachine.InitialReactiveCapabilityCurve $this .
                      ?rcc1 ^cim:CurveData.Curve ?curvedata .
                      ?curvedata rdf:type ?cdtype .
                      ?curvedata cim:CurveData.xvalue ?xvalue .
                      } .
            #?rcc1 ^cim:SynchronousMachine.InitialReactiveCapabilityCurve $this .
            #?rcc1 ^cim:CurveData.Curve ?curvedata .
            #?curvedata rdf:type ?cdtype .
            #?curvedata cim:CurveData.xvalue ?xvalue .
            #FILTER (bound(?rcc1) && ?cdtype=cim:CurveData ) .
          }
          GROUP BY $this ?cdtype
        }

        #FILTER ( (!bound(?rcc) && !(?value>=?minp && ?value<=?maxp)) || (bound(?rcc) && !(?value>=?minxvalue && ?value<=?maxxvalue))).
        FILTER ( (!bound(?rcc) && ((?value!=0 && (-?value<?minp || -?value>?maxp)) || (?value=0 && (?value<?minp || ?value>?maxp)))   ) || (bound(?rcc) && ((?value!=0 && (-?value<?minxvalue || -?value>?maxxvalue)) || (?value=0 && (?value<?minxvalue || ?value>?maxxvalue))))).
			}""" .       
      
svs456:SvPowerFlow.q-synchronousMachine
        a               sh:PropertyShape ;
        sh:sparql       svs456:SvPowerFlow.q-synchronousMachineSparql ;
        sh:path         rdf:type ;
        sh:description  "The SvPowerFlow.q that is given by the steady state power flow solution for a SynchronousMachine shall normally be within the capability of the machine defined in the ReactiveCapabilityCurve or SynchronousMachine.maxQ, SynchronousMachine.minQ when ReactiveCapabilityCurve is not present. Reactive power can be outside the capability if powerflow excludes reactive restriction. CIM cannot represent this so this contains will also give a warning. Note that different data exchange processes can assign more restrictive severity depending on the business needs and power flow algorithm applied by the business process.";
        sh:name         "C:456:SV:SvPowerFlow.q:synchronousMachine" ;
        sh:group        svs456:solved456 ;
        sh:order        5 ;
        sh:severity     sh:Warning .
        
svs456:SvPowerFlow.q-synchronousMachineSparql
		a         sh:SPARQLConstraint ;  
		sh:message "The value is outside of the range defined by the ReactiveCapabilityCurve or [SynchronousMachine.minQ, SynchronousMachine.maxQ] when the curve is not present." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value 
			WHERE {
        $this ^cim:Terminal.ConductingEquipment/^cim:SvPowerFlow.Terminal/cim:SvPowerFlow.q ?value .
        OPTIONAL {$this cim:SynchronousMachine.minQ ?minq }.
        OPTIONAL {$this cim:SynchronousMachine.maxQ ?maxq }.
        OPTIONAL {$this cim:SynchronousMachine.InitialReactiveCapabilityCurve ?rcc } .
                   
        {
        SELECT $this (MAX(?y2value) AS ?my2value)  (MIN(?y1value) AS ?my1value)
          WHERE {
            #OPTIONAL {?rcc1 ^cim:SynchronousMachine.InitialReactiveCapabilityCurve $this } .
            OPTIONAL {?rcc1 ^cim:SynchronousMachine.InitialReactiveCapabilityCurve $this.
                      ?rcc1 ^cim:CurveData.Curve ?curvedata .
                      ?curvedata rdf:type ?cdtype .
                      ?curvedata cim:CurveData.y1value ?y1value .
                      ?curvedata cim:CurveData.y2value ?y2value .
                      }.
            #FILTER (bound(?rcc1) && ?cdtype=cim:CurveData ) .
          }
          GROUP BY $this ?cdtype
        }

        FILTER ( (!bound(?rcc) && bound(?minq) && bound(?maxq) && ((?value!=0 && (-?value<?minq || -?value>?maxq)) || (?value=0 && (?value<?minq || ?value>?maxq)))) || (bound(?rcc) && ((?value!=0 && (-?value<?my1value || -?value>?my2value)) || (?value=0 && (?value<?my1value || ?value>?my2value))))).
			}""" .       
      
      
svs456:SvVoltage  a  sh:NodeShape ;
        sh:property     svs456:SvVoltage.v-limits , svs456:SvVoltage.v-absoluteLimit;
        sh:targetClass  cim:SvVoltage  .      
      
svs456:SvVoltage.v-limits
        a               sh:PropertyShape ;
        sh:sparql       svs456:SvVoltage.v-limitsSparql ;
        sh:path         rdf:type ;
        sh:description  "The SvVoltage.v shall be less than or equal to VoltageLimit.value associated with OperationalLimitType.limitType=highVoltage and greater than or equal to VoltageLimit.value associated with OperationalLimitType.limitType=lowVoltage." ;
        sh:name         "C:456:SV:SvVoltage.v:limits" ;
        sh:group        svs456:solved456 ;
        sh:order        6 ;
        sh:severity     sh:Violation .
        
svs456:SvVoltage.v-limitsSparql
		a         sh:SPARQLConstraint ;  
		sh:message "The value is outside the defined limits." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value 
			WHERE {
        $this cim:SvVoltage.v ?value .
        $this cim:SvVoltage.ToplogicalNode/^cim:ConnectivityNode.TopologicalNode/^cim:Terminal.ConnectivityNode ?term .
        
        ?limith cim:OperationalLimit.OperationalLimitSet/cim:OperationalLimitSet.Terminal ?term .
        ?limitl cim:OperationalLimit.OperationalLimitSet/cim:OperationalLimitSet.Terminal ?term .
        ?limith cim:OperationalLimit.OperationalLimitType/cim:OperationalLimitType.direction cim:OperationalLimitDirectionKind.high .
        ?limitl cim:OperationalLimit.OperationalLimitType/cim:OperationalLimitType.direction cim:OperationalLimitDirectionKind.low .
        ?limith cim:VoltageLimit.value ?vhigh .
        ?limitl cim:VoltageLimit.value ?vlow .
        
        #OPTIONAL {?limith cim:OperationalLimit.OperationalLimitSet/cim:OperationalLimitSet.Terminal ?term} .
        #OPTIONAL {?limitl cim:OperationalLimit.OperationalLimitSet/cim:OperationalLimitSet.Terminal ?term} .
        ##OPTIONAL {?limith rdf:type ?limithtype} .
        ##OPTIONAL {?limitl rdf:type ?limitltype} .
        #OPTIONAL {?limith cim:OperationalLimit.OperationalLimitType/cim:OperationalLimitType.direction cim:OperationalLimitDirectionKind.high} .
        #OPTIONAL {?limitl cim:OperationalLimit.OperationalLimitType/cim:OperationalLimitType.direction cim:OperationalLimitDirectionKind.low} .
        #OPTIONAL {?limith cim:VoltageLimit.value ?vhigh} .
        #OPTIONAL {?limitl cim:VoltageLimit.value ?vlow} .
       
        FILTER ( ?value>?vhigh || ?value<?vlow).
        #FILTER ( bound(?vhigh) && bound(?vlow) && ?value<=?vhigh && ?value>=?vlow).
			}""" .       
      
svs456:SvVoltage.v-absoluteLimit
        a               sh:PropertyShape ;
        sh:sparql       svs456:SvVoltage.v-absoluteLimitSparql ;
        sh:path         rdf:type ;
        sh:description  "SvVoltage.v shall be greater than 0.4 pu in cases where associated voltage limits are not defining different limit range." ;
        sh:name         "C:456:SV:SvVoltage.v:absoluteLimit" ;
        sh:group        svs456:solved456 ;
        sh:order        7 ;
        sh:severity     sh:Violation .
        
svs456:SvVoltage.v-absoluteLimitSparql
		a         sh:SPARQLConstraint ;  
		sh:message "The value is <=0.4 pu." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value 
			WHERE {
        $this cim:SvVoltage.v ?value .
        $this cim:SvVoltage.ToplogicalNode/^cim:ConnectivityNode.TopologicalNode/^cim:Terminal.ConnectivityNode ?term .
        $this cim:SvVoltage.ToplogicalNode/cim:ToplogicalNode.BaseVoltage/cim:BaseVoltage.nominalVoltage ?nvoltage .
        #OPTIONAL {?limith cim:OperationalLimit.OperationalLimitSet/cim:OperationalLimitSet.Terminal ?term} .
        #OPTIONAL {?limitl cim:OperationalLimit.OperationalLimitSet/cim:OperationalLimitSet.Terminal ?term} .
        ##OPTIONAL {?limith rdf:type ?limithtype} .
        ##OPTIONAL {?limitl rdf:type ?limitltype} .
        #OPTIONAL {?limith cim:OperationalLimit.OperationalLimitType/cim:OperationalLimitType.direction cim:OperationalLimitDirectionKind.high} .
        #OPTIONAL {?limitl cim:OperationalLimit.OperationalLimitType/cim:OperationalLimitType.direction cim:OperationalLimitDirectionKind.low} .
        #OPTIONAL {?limith cim:VoltageLimit.value ?vhigh} .
        #OPTIONAL {?limitl cim:VoltageLimit.value ?vlow} .
        OPTIONAL {
                  ?limith cim:OperationalLimit.OperationalLimitSet/cim:OperationalLimitSet.Terminal ?term .
                  ?limitl cim:OperationalLimit.OperationalLimitSet/cim:OperationalLimitSet.Terminal ?term .
                  ?limith cim:OperationalLimit.OperationalLimitType/cim:OperationalLimitType.direction cim:OperationalLimitDirectionKind.high .
                  ?limitl cim:OperationalLimit.OperationalLimitType/cim:OperationalLimitType.direction cim:OperationalLimitDirectionKind.low .
                  ?limith cim:VoltageLimit.value ?vhigh .
                  ?limitl cim:VoltageLimit.value ?vlow .
                  }.
       

        FILTER ( !bound(?vhigh) && !bound(?vlow) && (?value/?nvoltage)<=0.4).
			}""" . 