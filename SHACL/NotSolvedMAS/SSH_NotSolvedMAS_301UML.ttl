@base          <http://iec.ch/TC57/ns/CIM/SteadyStateHypothesis-EU/constraints/IEC61970-301/notSolved/3.0> .
@prefix eu:    <http://iec.ch/TC57/CIM100-European#> .
@prefix cims:  <http://iec.ch/TC57/1999/rdf-schema-extensions-19990926#> .
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix owl:   <http://www.w3.org/2002/07/owl#> .
@prefix sh:    <http://www.w3.org/ns/shacl#> .
@prefix cim:   <http://iec.ch/TC57/CIM100#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix sshn301: <http://iec.ch/TC57/ns/CIM/SteadyStateHypothesis-EU/constraints/IEC61970-301/notSolved/3.0#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix dash:  <http://datashapes.org/dash#> .
@prefix dct:    <http://purl.org/dc/terms/> .
@prefix dcat:    <http://www.w3.org/ns/dcat#> .


sshn301:Ontology  rdf:type         owl:Ontology ;
        dct:conformsTo        "urn:iso:std:iec:61970-501:draft:ed-2" , "urn:iso:std:iec:61970-600-2:ed-1" , "urn:iso:std:iec:61970-301:ed-7:amd1" , "file://iec61970cim17v40_iec61968cim13v13a_iec62325cim03v17a.eap" ;
        dct:creator           "ENTSO-E CIM EG"@en ;
        dct:description       "The constraints for SSH from UML."@en ;
        dct:identifier        "urn:uuid:84b2b2a7-f5f1-45b7-9bc1-9563e5a37268" ;
        dct:issued            "2021-10-19T12:09:21Z"^^xsd:dateTime ;
        dct:language          "en-GB" ;
        dct:modified          "2020-10-19"^^xsd:date ;
        dct:publisher         "ENTSO-E"@en ;
        dct:rights            "Copyright"@en ;
        dct:rightsHolder      "ENTSO-E"@en ;
        dct:title             "SSH not solved MAS Constraints"@en ;
        owl:versionIRI        <http://iec.ch/TC57/ns/CIM/SteadyStateHypothesis-EU/constraints/IEC61970-301/notSolved/3.0> ;
        owl:versionInfo       "3.0.0"@en ;
        dcat:landingPage      "https://www.entsoe.eu/digital/cim/cim-for-grid-models-exchange/" ;
        dcat:theme            "constraints"@en .
        
        
cim:    
    a           owl:Ontology ;
    owl:imports sh: ;
    sh:declare [
        a sh:PrefixDeclaration ;
        sh:namespace "http://iec.ch/TC57/CIM100#"^^xsd:anyURI ;
        sh:prefix "cim" ;
    ] ;
    sh:declare [
        a sh:PrefixDeclaration ;
        sh:namespace "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xsd:anyURI ;
        sh:prefix "rdf" ;
    ] ;
    sh:declare [
        a sh:PrefixDeclaration ;
        sh:namespace "http://iec.ch/TC57/CIM100-European#"^^xsd:anyURI ;
        sh:prefix "eu" ;
    ] .

sshn301:BatteryUnit.storedE-valueRangePair
        a               sh:PropertyShape ;
        sh:description  "The attribute shall be a positive value or zero and lower than BatteryUnit.ratedE." ;
        sh:group        sshn301:ValueConstraintsGroup ;
        sh:lessThan     cim:BatteryUnit.ratedE ;
        sh:message      "The value is either greater than or equal to BatteryUnit.ratedE." ;
        sh:name         "C:301:SSH:BatteryUnit.storedE:valueRangePair" ;
        sh:order        1 ;
        sh:path         cim:BatteryUnit.storedE ;
        sh:severity     sh:Violation .

sshn301:CsConverter  a  sh:NodeShape ;
        sh:property     sshn301:CsConverter.targetGamma-valueRangePairTo , sshn301:CsConverter.targetAlpha-valueRangePairTo , sshn301:CsConverter.targetGamma-applicability , sshn301:CsConverter.targetAlpha-applicability;
        sh:targetClass  cim:CsConverter .

sshn301:ValueConstraintsGroup
        a           sh:PropertyGroup ;
        rdfs:label  "ValueConstraints" ;
        sh:order    0 .

sshn301:PhaseTapChangerAsymmetrical
        a               sh:NodeShape ;
        sh:property     sshn301:TapChanger.step-valueRangePairTo ;
        sh:targetClass  cim:PhaseTapChangerAsymmetrical .

sshn301:RatioTapChanger
        a               sh:NodeShape ;
        sh:property     sshn301:TapChanger.step-valueRangePairTo ;
        sh:targetClass  cim:RatioTapChanger .

sshn301:TapChanger.step-valueRangePairTo
        a                    sh:PropertyShape ;
        sh:description       "The attribute shall be equal to or greater than lowStep and equal to or less than highStep." ;
        sh:group             sshn301:ValueConstraintsGroup ;
        sh:lessThanOrEquals  cim:TapChanger.highStep ;
        sh:message           "The value is greater than TapChanger.highStep." ;
        sh:name              "C:301:SSH:TapChanger.step:valueRangePairTo" ;
        sh:order             6 ;
        sh:path              cim:TapChanger.step ;
        sh:severity          sh:Violation .

sshn301:PhaseTapChangerTabular
        a               sh:NodeShape ;
        sh:property     sshn301:TapChanger.step-valueRangePairTo ;
        sh:targetClass  cim:PhaseTapChangerTabular .

sshn301:CsConverter.targetAlpha-valueRangePairTo
        a                    sh:PropertyShape ;
        sh:description       "Allowed values are within the range minAlpha<=targetAlpha<=maxAlpha." ;
        sh:group             sshn301:ValueConstraintsGroup ;
        sh:lessThanOrEquals  cim:CsConverter.maxAlpha ;
        sh:message           "The value is greater than CsConverter.maxAlpha." ;
        sh:name              "C:301:SSH:CsConverter.targetAlpha:valueRangePairTo" ;
        sh:order             2 ;
        sh:path              cim:CsConverter.targetAlpha ;
        sh:severity          sh:Violation .

sshn301:PhaseTapChangerSymmetrical
        a               sh:NodeShape ;
        sh:property     sshn301:TapChanger.step-valueRangePairTo ;
        sh:targetClass  cim:PhaseTapChangerSymmetrical .

sshn301:PhaseTapChangerLinear
        a               sh:NodeShape ;
        sh:property     sshn301:TapChanger.step-valueRangePairTo ;
        sh:targetClass  cim:PhaseTapChangerLinear .

sshn301:CsConverter.targetGamma-valueRangePairTo
        a                    sh:PropertyShape ;
        sh:description       "Allowed values are within the range minGamma<=targetGamma<=maxGamma. " ;
        sh:group             sshn301:ValueConstraintsGroup ;
        sh:lessThanOrEquals  cim:CsConverter.maxGamma ;
        sh:message           "The value is greater than CsConverter.maxGamma." ;
        sh:name              "C:301:SSH:CsConverter.targetGamma:valueRangePairTo" ;
        sh:order             4 ;
        sh:path              cim:CsConverter.targetGamma ;
        sh:severity          sh:Violation .

sshn301:BatteryUnit  a  sh:NodeShape ;
        sh:property     sshn301:BatteryUnit.storedE-valueRangePair ;
        sh:targetClass  cim:BatteryUnit .


sshn301:CsConverter.targetAlpha-applicability
        a               sh:PropertyShape ;
        sh:sparql       sshn301:CsConverter.targetAlpha-applicabilitySparql ;
        sh:description  "It is only applicable for rectifier if continuous tap changer control is used." ;
        sh:name         "C:301:SSH:CsConverter.targetAlpha:applicability" ;
        sh:path         cim:CsConverter.targetAlpha ;
        sh:group        sshn301:ValueConstraintsGroup ;
        sh:order        7 ;
        sh:severity     sh:Warning .
        
    
sshn301:CsConverter.targetAlpha-applicabilitySparql
		a         sh:SPARQLConstraint ;  
		sh:message "CsConverter.targetAlpha is provided for an inverter or discrete tap changer control is used or RegulatingControl is not provided." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value
			WHERE {
        #OPTIONAL {$this $PATH ?value}.
        $this $PATH ?value.
        $this cim:CsConverter.operatingMode ?opermode .
        #OPTIONAL {$this cim:ACDCConverter.PccTerminal ?pccterminal}.
        #OPTIONAL {?pccterminal cim:Terminal.ConductingEquipment ?condeq}. 
        #OPTIONAL {?condeq rdf:type ?condeqtype}.
        #OPTIONAL {?pccterminal cim:RegulatingControl.Terminal ?regcontrol}.
        #OPTIONAL {?regcontrol cim:RegulatingControl.discrete ?discrete}.
        
        OPTIONAL {$this cim:ACDCConverter.PccTerminal ?pccterminal .
                  ?pccterminal cim:Terminal.ConductingEquipment/rdf:type cim:PowerTransformer .
                  ?pccterminal ^cim:RegulatingControl.Terminal/cim:RegulatingControl.discrete ?discrete .
        } .
        
        
        #?regcontrol cim:RegulatingControl.Terminal ?pccterm .
        #FILTER (bound(?value) && (?opermode=cim:CsOperatingModeKind.inverter || (bound(?pccterminal) && ?condeqtype=cim:PowerTransformer && ?discrete=true && ?pccterm=?pccterminal))) .   
        FILTER ((?opermode=cim:CsOperatingModeKind.inverter || (bound(?pccterminal)  && ?discrete=true) || !bound(?discrete) )) .          
			}""" .
      
sshn301:CsConverter.targetGamma-applicability
        a               sh:PropertyShape ;
        sh:sparql       sshn301:CsConverter.targetGamma-applicabilitySparql ;
        sh:description  "It is only applicable for inverter if continuous tap changer control is used." ;
        sh:name         "C:301:SSH:CsConverter.targetGamma:applicability" ;
        sh:path         cim:CsConverter.targetGamma ;
        sh:group        sshn301:ValueConstraintsGroup ;
        sh:order        8 ;
        sh:severity     sh:Warning .
        
    
sshn301:CsConverter.targetGamma-applicabilitySparql
		a         sh:SPARQLConstraint ;  
		sh:message "CsConverter.targetGamma is provided for a rectifier or discrete tap changer control is used." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value
			WHERE {
        #OPTIONAL {$this $PATH ?value}.
        $this $PATH ?value.
        $this cim:CsConverter.operatingMode ?opermode .
        #OPTIONAL {$this cim:ACDCConverter.PccTerminal ?pccterminal}.
        #OPTIONAL {?pccterminal cim:Terminal.ConductingEquipment ?condeq}. 
        #OPTIONAL {?condeq rdf:type ?condeqtype}.
        #OPTIONAL {?pccterminal cim:RegulatingControl.Terminal ?regcontrol}.
        #OPTIONAL {?regcontrol cim:RegulatingControl.discrete ?discrete}.
        
        OPTIONAL {$this cim:ACDCConverter.PccTerminal ?pccterminal .
                  ?pccterminal cim:Terminal.ConductingEquipment/rdf:type cim:PowerTransformer .
                  ?pccterminal ^cim:RegulatingControl.Terminal/cim:RegulatingControl.discrete ?discrete .
        } .
        
        #?regcontrol cim:RegulatingControl.Terminal ?pccterm .
        #FILTER (bound(?value) && (?opermode=cim:CsOperatingModeKind.rectifier || (bound(?pccterminal) && ?condeqtype=cim:PowerTransformer && ?discrete=true && ?pccterm=?pccterminal))) . 
        FILTER ((?opermode=cim:CsOperatingModeKind.rectifier || (bound(?pccterminal) && ?discrete=true ) || !bound(?discrete))) .        
			}""" .      

sshn301:RegulatingControl  a  sh:NodeShape ;
        sh:property     sshn301:RegulatingControl-requiredAttributes;
#        , sshn301:RegulatingControl.targetValue-value;
        sh:targetClass  cim:RegulatingControl , cim:TapChangerControl .


sshn301:RegulatingControl-requiredAttributes
        a               sh:PropertyShape ;
        sh:sparql       sshn301:RegulatingControl-requiredAttributesSparql ;
        sh:description  "The attribute minAllowedTargetValue and maxAllowedTargetValue are required in the following cases: - For a power generating module operated in power factor control mode to specify maximum and minimum power factor values; - ...." ;
        sh:name         "C:301:SSH:RegulatingControl:requiredAttributes" ;
        sh:path         cim:RegulatingControl.mode ;
        sh:group        sshn301:ValueConstraintsGroup ;
        sh:order        9 ;
        sh:severity     sh:Violation .
        
    
sshn301:RegulatingControl-requiredAttributesSparql
		a         sh:SPARQLConstraint ;  
		sh:message "Both minAllowedTargetValue and maxAllowedTargetValue are not provided for RegulatingControl in mode powerFactor." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this 
			WHERE {
        #$this $PATH ?value .
        $this $PATH cim:RegulatingControlModeKind.powerFactor .
        OPTIONAL {$this cim:RegulatingControl.minAllowedTargetValue ?minvalue}.
        OPTIONAL {$this cim:RegulatingControl.maxAllowedTargetValue ?maxvalue}. 
        #FILTER (?value=cim:RegulatingControlModeKind.powerFactor && (!bound(?minvalue) || !bound(?maxvalue))) .
        FILTER (!bound(?minvalue) || !bound(?maxvalue)) .        
			}""" .
      
      
sshn301:TapChanger  a  sh:NodeShape ;
        sh:property     sshn301:TapChanger.step-valueType ;
        sh:targetClass  cim:RatioTapChanger , cim:PhaseTapChangerLinear , cim:PhaseTapChangerSymmetrical , cim:PhaseTapChangerAsymmetrical , cim:PhaseTapChangerTabular.


sshn301:TapChanger.step-valueType
        a               sh:PropertyShape ;
        sh:sparql       sshn301:TapChanger.step-valueTypeSparql ;
        sh:description  "Non integer values are allowed to support continuous tap variables." ;
        sh:name         "C:301:SSH:TapChanger.step:valueType" ;
        sh:path         cim:TapChanger.step ;
        sh:group        sshn301:ValueConstraintsGroup ;
        sh:order        10 ;
        sh:severity     sh:Violation .
        
    
sshn301:TapChanger.step-valueTypeSparql
		a         sh:SPARQLConstraint ;  
		sh:message "Non-integer value for a discrete TapChangerControl." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value
			WHERE {
        $this $PATH ?value .
        $this cim:TapChanger.TapChangerControl/cim:RegulatingControl.discrete true.
        #OPTIONAL {$this cim:TapChanger.TapChangerControl ?contr}.
        #?contr cim:RegulatingControl.discrete ?discrete . 
        #FILTER (STRENDS(str(?value), ".") && !REGEX(STRAFTER(str(?value), "."), "^[0]$", "i") && bound(?contr) && ?discrete=true) .  
        FILTER (STRENDS(str(?value), ".") && !REGEX(STRAFTER(str(?value), "."), "^[0]$", "i")) .        
			}""" .   


sshn301:LinearShuntCompensator  a  sh:NodeShape ;
        sh:property     sshn301:ShuntCompensator.sections-valueLinear ;
        sh:targetClass  cim:LinearShuntCompensator .

sshn301:ShuntCompensator.sections-valueLinear
        a               sh:PropertyShape ;
        sh:sparql       sshn301:ShuntCompensator.sections-valueLinearSparql ;
        sh:description  "Non integer values are allowed to support continuous variables. For LinearShuntCompensator the value shall be between zero and ShuntCompensator.maximumSections. At value zero the shunt compensator conductance and admittance is zero." ;
        sh:name         "C:301:SSH:ShuntCompensator.sections:valueLinear" ;
        sh:path         cim:ShuntCompensator.sections ;
        sh:group        sshn301:ValueConstraintsGroup ;
        sh:order        11 ;
        sh:severity     sh:Violation .
        
    
sshn301:ShuntCompensator.sections-valueLinearSparql
		a         sh:SPARQLConstraint ;  
		sh:message "The value is not between zero and ShuntCompensator.maximumSections." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value
			WHERE {
        $this $PATH ?value .
        $this cim:ShuntCompensator.maximumSections ?maxsections .
        #OPTIONAL {$this cim:RegulatingCondEq.RegulatingControl ?contr}.
        #$this cim:RegulatingCondEq.controlEnabled ?contrenabled .
        
        #FILTER (bound(?contr) && ?contrenabled=true && !(?value>=0 && ?value<=?maxsections)) . 
        FILTER ( !(?value>=0 && ?value<=?maxsections)) .        
			}""" .       
      
sshn301:NonlinearShuntCompensator  a  sh:NodeShape ;
        sh:property     sshn301:ShuntCompensator.sections-valueNonLinear ;
        sh:targetClass  cim:NonlinearShuntCompensator .

sshn301:ShuntCompensator.sections-valueNonLinear
        a               sh:PropertyShape ;
        sh:sparql       sshn301:ShuntCompensator.sections-valueNonLinearSparql ;
        sh:description  "For NonlinearShuntCompensator-s shall only be set to one of the NonlinearShuntCompenstorPoint.sectionNumber." ;
        sh:name         "C:301:SSH:ShuntCompensator.sections:valueNonLinear" ;
        sh:path         cim:ShuntCompensator.sections ;
        sh:group        sshn301:ValueConstraintsGroup ;
        sh:order        12 ;
        sh:severity     sh:Violation .
        
    
sshn301:ShuntCompensator.sections-valueNonLinearSparql
		a         sh:SPARQLConstraint ;  
		sh:message "The value does not equal one of the NonlinearShuntCompenstorPoint.sectionNumber." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value (COUNT(?type) AS ?types) ?typesall
			WHERE {
        {
        SELECT $this (COUNT(?typeall) AS ?typesall)
        WHERE {
            ?nscpointsall cim:NonlinearShuntCompensatorPoint.NonlinearShuntCompensator  $this .
            ?nscpointsall rdf:type ?typeall .
          }
        GROUP BY $this ?typesall
        }
        $this $PATH ?value .
        #OPTIONAL {$this cim:RegulatingCondEq.RegulatingControl ?contr}.
        #$this cim:RegulatingCondEq.controlEnabled ?contrenabled .
        ?nscpoints cim:NonlinearShuntCompensatorPoint.NonlinearShuntCompensator  $this .
        ?nscpoints rdf:type ?type .
        ?nscpoints cim:NonlinearShuntCompensatorPoint.sectionNumber ?sectionnumber .  
        #FILTER (bound(?contr) && ?contrenabled=true && ?value!=?sectionnumber) .
        FILTER (?value!=?sectionnumber) .
			}
      GROUP BY $this ?value ?types ?typesall
      HAVING(?types=?typesall)
      """ .        
 
sshn301:ControlArea  a  sh:NodeShape ;
        sh:property     sshn301:ControlArea-netInterchangeCalculation ;
        sh:targetClass  cim:ControlArea .

sshn301:ControlArea-netInterchangeCalculation
        a               sh:PropertyShape ;
        sh:sparql       sshn301:ControlArea-netInterchangeCalculationSparql ;
        sh:path         rdf:type ;
        sh:description  "Control area constraints in power flow are represented as a set of area control equality constraints of the form: Control Area Net Interchange = SUM (control area flow into the area on each tie)" ;
        sh:name         "C:301:SSH:ControlArea:netInterchangeCalculation" ;
        sh:group        sshn301:ValueConstraintsGroup ;
        sh:order        13 ;
        sh:severity     sh:Warning .
        
    
sshn301:ControlArea-netInterchangeCalculationSparql
		a         sh:SPARQLConstraint ;  
		sh:message "The sum of the EquivalentInjections which are connected to the BoundaryPoint-s differes from the ControlArea.netInterchange. ControlArea.netInterchange= {?value}. Sum of the EquivalentInjections= {?sump}." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value ?sump
			WHERE {
        $this cim:ControlArea.type cim:ControlAreaTypeKind.Interchange .
        $this cim:ControlArea.netInterchange ?value .
        {
        SELECT $this (SUM(?p) AS ?sump)
        WHERE {
              ?term ^cim:TieFlow.Terminal/cim:TieFlow.ControlArea $this  .
              ?term cim:Terminal.ConnectivityNode/^eu:BoundaryPoint.ConnectivityNode/rdf:type eu:BoundaryPoint .
              ?term cim:Terminal.ConductingEquipment/rdf:type cim:EquivalentInjection .
              ?term rdf:type ?termtype.
              ?term cim:Terminal.ConductingEquipment/cim:EquivalentInjection.p ?p .
          }
        GROUP BY $this ?termtype
        }
        FILTER (?value!=?sump) .
			} """ . 

 
            
      
      
      
      
      
      
      
      
      
      
      
      
      
      