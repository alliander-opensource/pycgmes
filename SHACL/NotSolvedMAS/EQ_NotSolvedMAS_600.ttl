@base          <http://iec.ch/TC57/ns/CIM/Equipment-EU/constraints/IEC61970-600/notSolved/3.0> .
@prefix eu:    <http://iec.ch/TC57/CIM100-European#> .
@prefix cims:  <http://iec.ch/TC57/1999/rdf-schema-extensions-19990926#> .
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix owl:   <http://www.w3.org/2002/07/owl#> .
@prefix sh:    <http://www.w3.org/ns/shacl#> .
@prefix cim:   <http://iec.ch/TC57/CIM100#> .
@prefix eqn600: <http://iec.ch/TC57/ns/CIM/Equipment-EU/constraints/IEC61970-600/notSolved/3.0#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix dash:  <http://datashapes.org/dash#> .
@prefix dct:    <http://purl.org/dc/terms/> .
@prefix dcat:    <http://www.w3.org/ns/dcat#> .

eqn600:Ontology  rdf:type         owl:Ontology ;
        dct:conformsTo        "urn:iso:std:iec:61970-501:draft:ed-2" , "urn:iso:std:iec:61970-600-2:ed-1" , "urn:iso:std:iec:61970-301:ed-7:amd1" , "file://iec61970cim17v40_iec61968cim13v13a_iec62325cim03v17a.eap" ;
        dct:creator           "ENTSO-E CIM EG"@en ;
        dct:description       "The constraints for EQ from IEC 61970-600-2."@en ;
        dct:identifier        "urn:uuid:14c6570b-2b78-4127-a958-bc31c7adf9b8" ;
        dct:issued            "2021-10-19T12:09:21Z"^^xsd:dateTime ;
        dct:language          "en-GB" ;
        dct:modified          "2020-10-19"^^xsd:date ;
        dct:publisher         "ENTSO-E"@en ;
        dct:rights            "Copyright"@en ;
        dct:rightsHolder      "ENTSO-E"@en ;
        dct:title             "EQ 600 not solved MAS Constraints"@en ;
        owl:versionIRI        <http://iec.ch/TC57/ns/CIM/Equipment-EU/constraints/IEC61970-600/notSolved/3.0> ;
        owl:versionInfo       "3.0.0"@en ;
        dcat:landingPage      "https://www.entsoe.eu/digital/cim/cim-for-grid-models-exchange/" ;
        dcat:theme            "constraints"@en .

cim:    
    a           owl:Ontology ;
    owl:imports sh: ;
    sh:declare [
        a sh:PrefixDeclaration ;
        sh:namespace "http://iec.ch/TC57/CIM100#"^^xsd:anyURI ;
        sh:prefix "cim" ;
    ] ;
    sh:declare [
        a sh:PrefixDeclaration ;
        sh:namespace "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xsd:anyURI ;
        sh:prefix "rdf" ;
    ] ;
    sh:declare [
        a sh:PrefixDeclaration ;
        sh:namespace "http://iec.ch/TC57/CIM100-European#"^^xsd:anyURI ;
        sh:prefix "eu" ;
    ] .

eqn600:IGMunsolved600EQGroup
        a           sh:PropertyGroup ;
        rdfs:label  "NotSolvedMAS600EQ" ;
        sh:order    0 .

eqn600:EquivalentInjection  a  sh:NodeShape ;
        sh:property     eqn600:EquivalentInjection.regulationCapability-notHVDC ;
        sh:targetClass  cim:EquivalentInjection .

eqn600:EquivalentInjection.regulationCapability-notHVDC
        a               sh:PropertyShape ;
        sh:sparql       eqn600:EquivalentInjection.regulationCapability-notHVDCSparql ;
        sh:description  "If EquivalentInjection connects to a BoundaryPoint with flag isDirectCurrent=false (meaning this is not HVDC), the EquivalentInjection.regulationCapability in EQ shall be set to false and there shall not be a ReactiveCapabilityCurve associated." ;
        sh:name         "C:600:EQ:EquivalentInjection.regulationCapability:notHvdc" ;
        sh:path         cim:EquivalentInjection.regulationCapability ;
        sh:group        eqn600:IGMunsolved600EQGroup ;
        sh:order        1 ;
        sh:severity     sh:Violation .
        
eqn600:EquivalentInjection.regulationCapability-notHVDCSparql
		a         sh:SPARQLConstraint ;  
		sh:message "EquivalentInjection connects to a BoundaryPoint with flag isDirectCurrent=false (meaning this is not HVDC), but either EquivalentInjection.regulationCapability is set to true or there is a ReactiveCapabilityCurve associated." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value
			WHERE {
        $this $PATH ?value.
        OPTIONAL {$this cim:EquivalentInjection.ReactiveCapabilityCurve ?curve}.
        OPTIONAL {$this ^cim:Terminal.ConductingEquipment/cim:Terminal.ConnectivityNode/^eu:BoundaryPoint.ConnectivityNode ?bp } .
        OPTIONAL {?bp eu:BoundaryPoint.isDirectCurrent ?ishvdc } .
        FILTER (bound(?bp) && bound(?ishvdc) && ?ishvdc=false && (bound(?curve) || ?value=true)) .        
			}""" .


eqn600:BoundaryPoint  a  sh:NodeShape ;
        sh:property     eqn600:BoundaryPoint-bppl1Bppl2, eqn600:BoundaryPoint-bppl3;
        sh:target  
        [
              a sh:SPARQLTarget ;
              sh:prefixes cim: ;
              sh:select """
                SELECT ?this
                WHERE {
                  ?this a cim:ConnectivityNode .
                  ?this ^eu:BoundaryPoint.ConnectivityNode/rdf:type eu:BoundaryPoint .
                  
                }
                """ ;
        ] . 

eqn600:BoundaryPoint-bppl1Bppl2
        a               sh:PropertyShape ;
        sh:sparql       eqn600:BoundaryPoint-bppl1Bppl2Sparql ;
        sh:path         rdf:type ;
        sh:description  "BPPL1 EquivalentInjection classes are used to represent the power flow exchanges through Boundary points. These classes are included in the individual model MAS (e.g. Model Authority MAS) and refer to the Boundary points (ConnectivityNode-s) in the Boundary set. The SvInjection class is not used for this purpose. BPPL2 In case the use cases require the exchange of multiple SSH, TP, SV, etc. instance files (distribution) which are dependent on an EQ instance file, this EQ shall always include an instance of EquivalentInjection per Boundary point. Therefore, in a multi MAS (among TSOs, DSOs or mixed) exchange a Boundary point shall always have two EquivalentInjections per Boundary point which are contained in different MAS connecting to the Boundary point. mRIDs of those EquivalentInjections are kept persistent." ;
        sh:name         "C:600:EQ:BoundaryPoint:bppl1Bppl2" ;
        sh:group        eqn600:IGMunsolved600EQGroup ;
        sh:order        2 ;
        sh:severity     sh:Violation .
        
eqn600:BoundaryPoint-bppl1Bppl2Sparql
		a         sh:SPARQLConstraint ;  
		sh:message "ConnectivityNode which is designated as BoundaryPoint does not have EquivalentInjection connected to it." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value
			WHERE {
        $this cim:IdentifiedObject.name ?value .
        
        {
          SELECT $this 
          WHERE {
            $this ^cim:Terminal.ConnectivityNode/cim:Terminal.ConductingEquipment/rdf:type ?bptype.
            
            FILTER (bound(?bptype) && ?bptype IN (cim:ACLineSegment , cim:PowerTransformer, cim:DCLineSegment, cim:DCSeriesDevice, cim:DCSwitch, cim:DCDisconnector, cim:DCBreaker, cim:DCChopper, cim:Switch, cim:Disconnector, cim:Fuse, cim:GroundDisconnector, cim:Jumper, cim:Breaker, cim:LoadBreakSwitch, cim:DisconnectingCircuitBreaker, cim:Cut, cim:SeriesCompensator, cim:EquivalentBranch)) .
          }
        }
        FILTER NOT EXISTS {
        $this ^cim:Terminal.ConnectivityNode/cim:Terminal.ConductingEquipment/rdf:type cim:EquivalentInjection 
        }.
			}""" . 
     

eqn600:BoundaryPoint-bppl3
        a               sh:PropertyShape ;
        sh:sparql       eqn600:BoundaryPoint-bppl3Sparql ;
        sh:path         rdf:type ;
        sh:description  "A ConnectivityNode and a TopologicalNode representing a Boundary point may connect various branches." ;
        sh:name         "C:600:EQ:BoundaryPoint:bppl3" ;
        sh:group        eqn600:IGMunsolved600EQGroup ;
        sh:order        3 ;
        sh:severity     sh:Info .
        
eqn600:BoundaryPoint-bppl3Sparql
		a         sh:SPARQLConstraint ;  
		sh:message "ConnectivityNode which is designated as BoundaryPoint does not have a two-Terminal ConductingEquipment connected to it." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value
			WHERE {
        $this cim:IdentifiedObject.name ?value .
        
        FILTER NOT EXISTS {
        $this ^cim:Terminal.ConnectivityNode/cim:Terminal.ConductingEquipment/rdf:type cim:ACLineSegment 
        }.
        FILTER NOT EXISTS {
        $this ^cim:Terminal.ConnectivityNode/cim:Terminal.ConductingEquipment/rdf:type cim:PowerTransformer 
        }.
        FILTER NOT EXISTS {
        $this ^cim:Terminal.ConnectivityNode/cim:Terminal.ConductingEquipment/rdf:type cim:DCLineSegment 
        }.
        FILTER NOT EXISTS {
        $this ^cim:Terminal.ConnectivityNode/cim:Terminal.ConductingEquipment/rdf:type cim:DCSeriesDevice 
        }.
        FILTER NOT EXISTS {
        $this ^cim:Terminal.ConnectivityNode/cim:Terminal.ConductingEquipment/rdf:type cim:DCSwitch 
        }.
        FILTER NOT EXISTS {
        $this ^cim:Terminal.ConnectivityNode/cim:Terminal.ConductingEquipment/rdf:type cim:DCDisconnector 
        }.
        FILTER NOT EXISTS {
        $this ^cim:Terminal.ConnectivityNode/cim:Terminal.ConductingEquipment/rdf:type cim:DCBreaker 
        }.
        FILTER NOT EXISTS {
        $this ^cim:Terminal.ConnectivityNode/cim:Terminal.ConductingEquipment/rdf:type cim:DCChopper 
        }.
        FILTER NOT EXISTS {
        $this ^cim:Terminal.ConnectivityNode/cim:Terminal.ConductingEquipment/rdf:type cim:Switch 
        }.
        FILTER NOT EXISTS {
        $this ^cim:Terminal.ConnectivityNode/cim:Terminal.ConductingEquipment/rdf:type cim:Disconnector 
        }.
        FILTER NOT EXISTS {
        $this ^cim:Terminal.ConnectivityNode/cim:Terminal.ConductingEquipment/rdf:type cim:Fuse 
        }.
        FILTER NOT EXISTS {
        $this ^cim:Terminal.ConnectivityNode/cim:Terminal.ConductingEquipment/rdf:type cim:GroundDisconnector 
        }.
        FILTER NOT EXISTS {
        $this ^cim:Terminal.ConnectivityNode/cim:Terminal.ConductingEquipment/rdf:type cim:Jumper 
        }.
        FILTER NOT EXISTS {
        $this ^cim:Terminal.ConnectivityNode/cim:Terminal.ConductingEquipment/rdf:type cim:Breaker 
        }.
        FILTER NOT EXISTS {
        $this ^cim:Terminal.ConnectivityNode/cim:Terminal.ConductingEquipment/rdf:type cim:LoadBreakSwitch 
        }.
        FILTER NOT EXISTS {
        $this ^cim:Terminal.ConnectivityNode/cim:Terminal.ConductingEquipment/rdf:type cim:DisconnectingCircuitBreaker 
        }.
        FILTER NOT EXISTS {
        $this ^cim:Terminal.ConnectivityNode/cim:Terminal.ConductingEquipment/rdf:type cim:Cut 
        }.
        FILTER NOT EXISTS {
        $this ^cim:Terminal.ConnectivityNode/cim:Terminal.ConductingEquipment/rdf:type cim:SeriesCompensator 
        }.
        FILTER NOT EXISTS {
        $this ^cim:Terminal.ConnectivityNode/cim:Terminal.ConductingEquipment/rdf:type cim:EquivalentBranch 
        }.
			}""" .        

eqn600:ACLineSegment  a  sh:NodeShape ;
        sh:property     eqn600:ACLineSegment-BaseVoltageDiff ;
        sh:targetClass  cim:ACLineSegment .

eqn600:ACLineSegment-BaseVoltageDiff
        a               sh:PropertyShape ;
        sh:sparql       eqn600:ACLineSegment-BaseVoltageDiffSparql ;
        sh:path         rdf:type ;
        sh:description  "CGMES exchanges allow 10 % difference of the BaseVoltage.nominalVoltage at the two ends of an ACLineSegment representing a complete tie-line or connecting to a boundary node." ;
        sh:name         "C:600:EQ:ACLineSegment:BaseVoltageDiff" ;
        sh:group        eqn600:IGMunsolved600EQGroup ;
        sh:order        4 ;
        sh:severity     sh:Violation .

eqn600:ACLineSegment-BaseVoltageDiffSparql
		a         sh:SPARQLConstraint ;  
		sh:message "More that 10% difference of the BaseVoltage.nominalVoltage at the two ends of an ACLineSegment. Voltage 1: {?tp1nv}; Voltage 2: {?tp2nv}" ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?tp1nv ?tp2nv
			WHERE {
        ?term1 cim:Terminal.ConductingEquipment $this .
        ?term2 cim:Terminal.ConductingEquipment $this .
        ?term1 cim:ACDCTerminal.sequenceNumber 1.
        ?term2 cim:ACDCTerminal.sequenceNumber 2.
        ?tp1  ^cim:Terminal.TopologicalNode ?term1 .
        ?tp1 cim:TopologicalNode.BaseVoltage/cim:BaseVoltage.nominalVoltage ?tp1nv .
        ?tp2  ^cim:Terminal.TopologicalNode ?term2 .
        ?tp2 cim:TopologicalNode.BaseVoltage/cim:BaseVoltage.nominalVoltage ?tp2nv .
        
        FILTER ((?tp1nv<?tp2nv && (ABS(?tp1nv-?tp2nv)/?tp1nv)>0.1) || (?tp1nv>?tp2nv && (ABS(?tp1nv-?tp2nv)/?tp2nv)>0.1)) .        
			}""" .

