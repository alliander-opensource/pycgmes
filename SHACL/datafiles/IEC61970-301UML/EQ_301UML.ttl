@base          <http://iec.ch/TC57/ns/CIM/Equipment-EU/constraints/IEC61970-301/3.0> .
@prefix eu:    <http://iec.ch/TC57/CIM100-European#> .
@prefix cims:  <http://iec.ch/TC57/1999/rdf-schema-extensions-19990926#> .
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix owl:   <http://www.w3.org/2002/07/owl#> .
@prefix sh:    <http://www.w3.org/ns/shacl#> .
@prefix cim:   <http://iec.ch/TC57/CIM100#> .
@prefix equ:  <http://iec.ch/TC57/ns/CIM/Equipment-EU/constraints/IEC61970-301/3.0#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix dash:  <http://datashapes.org/dash#> .
@prefix dct:    <http://purl.org/dc/terms/> .
@prefix dcat:    <http://www.w3.org/ns/dcat#> .

equ:Ontology  rdf:type         owl:Ontology ;
        dct:conformsTo        "urn:iso:std:iec:61970-501:draft:ed-2" , "urn:iso:std:iec:61970-600-2:ed-1" , "urn:iso:std:iec:61970-301:ed-7:amd1" , "file://iec61970cim17v40_iec61968cim13v13a_iec62325cim03v17a.eap" ;
        dct:creator           "ENTSO-E CIM EG"@en ;
        dct:description       "The constraints for EQ from UML."@en ;
        dct:identifier        "urn:uuid:ed445c21-e627-42ad-bab9-c86ae09c1a77" ;
        dct:issued            "2021-10-19T12:09:21Z"^^xsd:dateTime ;
        dct:language          "en-GB" ;
        dct:modified          "2020-10-19"^^xsd:date ;
        dct:publisher         "ENTSO-E"@en ;
        dct:rights            "Copyright"@en ;
        dct:rightsHolder      "ENTSO-E"@en ;
        dct:title             "EQ UML Constraints"@en ;
        owl:versionIRI        <http://iec.ch/TC57/ns/CIM/Equipment-EU/constraints/IEC61970-301/3.0> ;
        owl:versionInfo       "3.0.0"@en ;
        dcat:landingPage      "https://www.entsoe.eu/digital/cim/cim-for-grid-models-exchange/" ;
        dcat:theme            "constraints"@en .
        
cim:    
    a           owl:Ontology ;
    owl:imports sh: ;
    sh:declare [
        a sh:PrefixDeclaration ;
        sh:namespace "http://iec.ch/TC57/CIM100#"^^xsd:anyURI ;
        sh:prefix "cim" ;
    ] ;
    sh:declare [
        a sh:PrefixDeclaration ;
        sh:namespace "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xsd:anyURI ;
        sh:prefix "rdf" ;
    ] ;
    sh:declare [
        a sh:PrefixDeclaration ;
        sh:namespace "http://iec.ch/TC57/CIM100-European#"^^xsd:anyURI ;
        sh:prefix "eu" ;
    ] .


equ:Cut  a             sh:NodeShape ;
        sh:property     equ:Switch.ratedCurrent-valueRange , equ:Cut.lengthFromTerminal1-length , equ:Switch-numberOfTerminals;
        sh:targetClass  cim:Cut .

equ:BoundaryPoint.toEndNameTso-stringLength
        a               sh:PropertyShape ;
        sh:description  "The length of the string is 64 characters maximum." ;
        sh:group        equ:EQ301UML ;
        sh:maxLength    64 ;
        sh:message      "String length is greater than 64 characters." ;
        sh:name         "C:301:EQ:BoundaryPoint.toEndNameTso:stringLength" ;
        sh:order        17 ;
        sh:path         eu:BoundaryPoint.toEndNameTso ;
        sh:severity     sh:Violation .

equ:ACDCConverter.resistiveLoss-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall be a positive value." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative or zero." ;
        sh:minExclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:ACDCConverter.resistiveLoss:valueRange" ;
        sh:order         6 ;
        sh:path          cim:ACDCConverter.resistiveLoss ;
        sh:severity      sh:Violation .

equ:HydroGeneratingUnit
        a               sh:NodeShape ;
        sh:property     equ:GeneratingUnit.ratedNetMaxP-valueRange , equ:GeneratingUnit.ratedGrossMinP-valueRange , equ:GeneratingUnit.ratedGrossMaxP-valueRange , equ:HydroGeneratingUnit.dropHeight-length;
        sh:targetClass  cim:HydroGeneratingUnit .

equ:ACLineSegment  a   sh:NodeShape ;
        sh:property    equ:Conductor.length-length;
        sh:targetClass  cim:ACLineSegment .

equ:TapChangerControl
        a               sh:NodeShape ;
        sh:property     equ:RegulatingControl-terminalConnectivityNode;
        sh:targetClass  cim:TapChangerControl .

equ:SynchronousMachine
        a               sh:NodeShape ;
        sh:property     equ:RotatingMachine.ratedU-valueRange , equ:RotatingMachine.ratedS-valueRange , equ:RotatingMachine.ratedPowerFactor-valueRange  ;
        sh:targetClass  cim:SynchronousMachine .


equ:BoundaryPoint.fromEndNameTso-stringLength
        a               sh:PropertyShape ;
        sh:description  "The length of the string is 64 characters maximum." ;
        sh:group        equ:EQ301UML ;
        sh:maxLength    64 ;
        sh:message      "String length is greater than 64 characters." ;
        sh:name         "C:301:EQ:BoundaryPoint.fromEndNameTso:stringLength" ;
        sh:order        14 ;
        sh:path         eu:BoundaryPoint.fromEndNameTso ;
        sh:severity     sh:Violation .

equ:ACDCConverter.maxUdc-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall be a positive value." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative or zero." ;
        sh:minExclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:ACDCConverter.maxUdc:valueRange" ;
        sh:order         3 ;
        sh:path          cim:ACDCConverter.maxUdc ;
        sh:severity      sh:Violation .

equ:NuclearGeneratingUnit
        a               sh:NodeShape ;
        sh:property     equ:GeneratingUnit.ratedNetMaxP-valueRange , equ:GeneratingUnit.ratedGrossMinP-valueRange , equ:GeneratingUnit.ratedGrossMaxP-valueRange ;
        sh:targetClass  cim:NuclearGeneratingUnit .



equ:Fuse  a            sh:NodeShape ;
        sh:property     equ:Switch.ratedCurrent-valueRange , equ:Switch-numberOfTerminals;
        sh:targetClass  cim:Fuse .

equ:CsConverter  a     sh:NodeShape ;
        sh:property     equ:CsConverter.minGamma-valueRange , equ:ACDCConverter.switchingLoss-valueRange , equ:ACDCConverter.minUdc-valueRange , equ:CsConverter.ratedIdc-valueRange , equ:CsConverter.maxAlpha-valueRange , equ:ACDCConverter.baseS-valueRange , equ:ACDCConverter.maxUdc-valueRange , equ:ACDCConverter.resistiveLoss-valueRange , equ:CsConverter.minAlpha-valueRange , equ:CsConverter.maxIdc-valueRange , equ:CsConverter.minIdc-valueRange , equ:ACDCConverter.ratedUdc-valueRange , equ:ACDCConverter.idleLoss-valueRange , equ:CsConverter.maxGamma-valueRange ;
        sh:targetClass  cim:CsConverter .
        
equ:CsConverter.minGamma-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall be a positive value." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative or zero." ;
        sh:minExclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:CsConverter.minGamma:valueRange" ;
        sh:order         26 ;
        sh:path          cim:CsConverter.minGamma ;
        sh:severity      sh:Violation .        
        
equ:CsConverter.maxGamma-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall be a positive value." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative or zero." ;
        sh:minExclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:CsConverter.maxGamma:valueRange" ;
        sh:order         23 ;
        sh:path          cim:CsConverter.maxGamma ;
        sh:severity      sh:Violation .        

equ:EQ301UML
        a           sh:PropertyGroup ;
        rdfs:label  "IEC61970-301-EQ" ;
        sh:order    0 .

equ:BaseVoltage.nominalVoltage-valueRange
        a                sh:PropertyShape ;
        sh:description   "Shall be a positive value and not zero." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative or zero." ;
        sh:minExclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:BaseVoltage.nominalVoltage:valueRange" ;
        sh:order         10 ;
        sh:path          cim:BaseVoltage.nominalVoltage ;
        sh:severity      sh:Violation .

equ:GeneratingUnit.ratedGrossMaxP-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall be a positive value." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative or zero." ;
        sh:minExclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:GeneratingUnit.ratedGrossMaxP:valueRange" ;
        sh:order         31 ;
        sh:path          cim:GeneratingUnit.ratedGrossMaxP ;
        sh:severity      sh:Violation .

equ:Switch.ratedCurrent-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall be a positive value." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative or zero." ;
        sh:minExclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:Switch.ratedCurrent:valueRange" ;
        sh:order         47 ;
        sh:path          cim:Switch.ratedCurrent ;
        sh:severity      sh:Violation .



equ:OperationalLimitType
        a               sh:NodeShape ;
        sh:property     equ:OperationalLimitType.acceptableDuration-usage , equ:OperationalLimitType.isInfiniteDuration-usage;
        sh:targetClass  cim:OperationalLimitType .

equ:BoundaryPoint.toEndName-stringLength
        a               sh:PropertyShape ;
        sh:description  "A human readable name with length of the string 64 characters maximum." ;
        sh:group        equ:EQ301UML ;
        sh:maxLength    64 ;
        sh:message      "String length is greater than 64 characters." ;
        sh:name         "C:301:EQ:BoundaryPoint.toEndName:stringLength" ;
        sh:order        16 ;
        sh:path         eu:BoundaryPoint.toEndName ;
        sh:severity     sh:Violation .

equ:StaticVarCompensator.inductiveRating-valueRange
        a                sh:PropertyShape ;
        sh:description   "Shall always be negative.  " ;
        sh:group         equ:EQ301UML ;
        sh:maxExclusive  "0.0"^^xsd:float ;
        sh:message       "The value is positive or zero." ;
        sh:name          "C:301:EQ:StaticVarCompensator.inductiveRating:valueRange" ;
        sh:order         45 ;
        sh:path          cim:StaticVarCompensator.inductiveRating ;
        sh:severity      sh:Violation .

equ:Jumper  a          sh:NodeShape ;
        sh:property     equ:Switch.ratedCurrent-valueRange , equ:Switch-numberOfTerminals;
        sh:targetClass  cim:Jumper .

equ:RatioTapChanger  a  sh:NodeShape ;
        sh:property     equ:TapChanger.normalStep-valueRangePairTo , equ:TapChanger.normalStep-valueRangePairFrom , equ:TapChanger.neutralStep-valueRangePairTo , equ:TapChanger.neutralStep-valueRangePairFrom , equ:TapChanger.highStep-valueRangePair ;
        sh:targetClass  cim:RatioTapChanger .

equ:Disconnector  a    sh:NodeShape ;
        sh:property     equ:Switch.ratedCurrent-valueRange , equ:Switch-numberOfTerminals;
        sh:targetClass  cim:Disconnector .

equ:DCLineSegment  a   sh:NodeShape ;
        sh:property     equ:DCConductingEquipment.ratedUdc-valueRange , equ:DCLineSegment.length-length;
        sh:targetClass  cim:DCLineSegment .

equ:CsConverter.ratedIdc-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall be a positive value." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative or zero." ;
        sh:minExclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:CsConverter.ratedIdc:valueRange" ;
        sh:order         28 ;
        sh:path          cim:CsConverter.ratedIdc ;
        sh:severity      sh:Violation .

equ:LoadBreakSwitch  a  sh:NodeShape ;
        sh:property     equ:Switch.ratedCurrent-valueRange , equ:Switch-numberOfTerminals;
        sh:targetClass  cim:LoadBreakSwitch .

equ:Breaker  a         sh:NodeShape ;
        sh:property     equ:Switch.ratedCurrent-valueRange , equ:Switch-numberOfTerminals;
        sh:targetClass  cim:Breaker .

equ:EquivalentBranch
        a               sh:NodeShape ;
        sh:property     equ:EquivalentBranch.r21-usage , equ:EquivalentBranch.x21-usage;
        sh:targetClass  cim:EquivalentBranch .

equ:GeneratingUnit  a  sh:NodeShape ;
        sh:property     equ:GeneratingUnit.ratedNetMaxP-valueRange , equ:GeneratingUnit.ratedGrossMinP-valueRange , equ:GeneratingUnit.ratedGrossMaxP-valueRange ;
        sh:targetClass  cim:GeneratingUnit .

equ:VoltageLimit  a    sh:NodeShape ;
        sh:property     equ:VoltageLimit.normalValue-valueRange ;
        sh:targetClass  cim:VoltageLimit .

equ:PowerElectronicsConnection.ratedU-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall be a positive value." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative or zero." ;
        sh:minExclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:PowerElectronicsConnection.ratedU:valueRange" ;
        sh:order         37 ;
        sh:path          cim:PowerElectronicsConnection.ratedU ;
        sh:severity      sh:Violation .

equ:GroundDisconnector
        a               sh:NodeShape ;
        sh:property     equ:Switch.ratedCurrent-valueRange , equ:Switch-numberOfTerminals;
        sh:targetClass  cim:GroundDisconnector .

equ:CurrentLimit.normalValue-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall be a positive value or zero." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative." ;
        sh:minInclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:CurrentLimit.normalValue:valueRange" ;
        sh:order         29 ;
        sh:path          cim:CurrentLimit.normalValue ;
        sh:severity      sh:Violation .

equ:StaticVarCompensator.slope-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall be a positive value or zero." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative." ;
        sh:minInclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:StaticVarCompensator.slope:valueRange" ;
        sh:order         46 ;
        sh:path          cim:StaticVarCompensator.slope ;
        sh:severity      sh:Violation .

equ:BoundaryPoint.fromEndIsoCode-stringLength
        a               sh:PropertyShape ;
        sh:description  "The length of the string is 2 characters maximum." ;
        sh:group        equ:EQ301UML ;
        sh:maxLength    2 ;
        sh:message      "String length is not 2 characters." ;
        sh:minLength    2 ;
        sh:name         "C:301:EQ:BoundaryPoint.fromEndIsoCode:stringLength" ;
        sh:order        12 ;
        sh:path         eu:BoundaryPoint.fromEndIsoCode ;
        sh:severity     sh:Violation .

equ:ACDCConverter.baseS-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall be a positive value." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative or zero." ;
        sh:minExclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:ACDCConverter.baseS:valueRange" ;
        sh:order         1 ;
        sh:path          cim:ACDCConverter.baseS ;
        sh:severity      sh:Violation .

equ:BoundaryPoint.fromEndName-stringLength
        a               sh:PropertyShape ;
        sh:description  "A human readable name with length of the string 64 characters maximum. " ;
        sh:group        equ:EQ301UML ;
        sh:maxLength    64 ;
        sh:message      "String length is greater than 64 characters." ;
        sh:name         "C:301:EQ:BoundaryPoint.fromEndName:stringLength" ;
        sh:order        13 ;
        sh:path         eu:BoundaryPoint.fromEndName ;
        sh:severity     sh:Violation .

equ:PowerElectronicsConnection
        a               sh:NodeShape ;
        sh:property     equ:PowerElectronicsConnection.ratedU-valueRange , equ:PowerElectronicsConnection.ratedS-valueRange  ;
        sh:targetClass  cim:PowerElectronicsConnection .

equ:ThermalGeneratingUnit
        a               sh:NodeShape ;
        sh:property     equ:GeneratingUnit.ratedNetMaxP-valueRange , equ:GeneratingUnit.ratedGrossMinP-valueRange , equ:GeneratingUnit.ratedGrossMaxP-valueRange ;
        sh:targetClass  cim:ThermalGeneratingUnit .

equ:BoundaryPoint  a   sh:NodeShape ;
        sh:property     equ:BoundaryPoint.fromEndName-stringLength , equ:BoundaryPoint.fromEndIsoCode-stringLength , equ:BoundaryPoint.toEndNameTso-stringLength , equ:BoundaryPoint.fromEndNameTso-stringLength , equ:BoundaryPoint.toEndIsoCode-stringLength , equ:BoundaryPoint.toEndName-stringLength ;
        sh:targetClass  eu:BoundaryPoint .

equ:ACDCConverter.ratedUdc-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall be a positive value." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative or zero." ;
        sh:minExclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:ACDCConverter.ratedUdc:valueRange" ;
        sh:order         5 ;
        sh:path          cim:ACDCConverter.ratedUdc ;
        sh:severity      sh:Violation .

equ:DCSwitch  a        sh:NodeShape ;
        sh:property     equ:DCConductingEquipment.ratedUdc-valueRange ;
        sh:targetClass  cim:DCSwitch .

equ:BatteryUnit  a     sh:NodeShape ;
        sh:property     equ:BatteryUnit.ratedE-valueRange ;
        sh:targetClass  cim:BatteryUnit .

equ:CsConverter.minAlpha-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall be a positive value." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative or zero." ;
        sh:minExclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:CsConverter.minAlpha:valueRange" ;
        sh:order         25 ;
        sh:path          cim:CsConverter.minAlpha ;
        sh:severity      sh:Violation .

equ:VoltageLimit.normalValue-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall be a positive value or zero." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative." ;
        sh:minInclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:VoltageLimit.normalValue:valueRange" ;
        sh:order         53 ;
        sh:path          cim:VoltageLimit.normalValue ;
        sh:severity      sh:Violation .

equ:SeriesCompensator
        a               sh:NodeShape ;
        sh:property     equ:SeriesCompensator-numberOfTerminals ;
        sh:targetClass  cim:SeriesCompensator .

equ:ApparentPowerLimit
        a               sh:NodeShape ;
        sh:property     equ:ApparentPowerLimit.normalValue-valueRange ;
        sh:targetClass  cim:ApparentPowerLimit .

equ:ACDCConverter.switchingLoss-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall be a positive value." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative or zero." ;
        sh:minExclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:ACDCConverter.switchingLoss:valueRange" ;
        sh:order         7 ;
        sh:path          cim:ACDCConverter.switchingLoss ;
        sh:severity      sh:Violation .

equ:PowerElectronicsConnection.ratedS-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall have a positive value." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative or zero." ;
        sh:minExclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:PowerElectronicsConnection.ratedS:valueRange" ;
        sh:order         36 ;
        sh:path          cim:PowerElectronicsConnection.ratedS ;
        sh:severity      sh:Violation .

equ:VsConverter.maxModulationIndex-valueRangeTypical
        a                sh:PropertyShape ;
        sh:description   "A factor typically less than 1." ;
        sh:group         equ:EQ301UML ;
        sh:maxInclusive  "1.0"^^xsd:float ;
        sh:message       "The value is greater than 1." ;
        sh:name          "C:301:EQ:VsConverter.maxModulationIndex:valueRangeTypical" ;
        sh:order         54 ;
        sh:path          cim:VsConverter.maxModulationIndex ;
        sh:severity      sh:Warning .

equ:PhaseTapChangerTabular
        a               sh:NodeShape ;
        sh:property     equ:TapChanger.normalStep-valueRangePairTo , equ:TapChanger.normalStep-valueRangePairFrom , equ:TapChanger.neutralStep-valueRangePairTo , equ:TapChanger.neutralStep-valueRangePairFrom , equ:TapChanger.highStep-valueRangePair ;
        sh:targetClass  cim:PhaseTapChangerTabular .



equ:ApparentPowerLimit.normalValue-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall be a positive value or zero." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative." ;
        sh:minInclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:ApparentPowerLimit.normalValue:valueRange" ;
        sh:order         9 ;
        sh:path          cim:ApparentPowerLimit.normalValue ;
        sh:severity      sh:Violation .

equ:StaticVarCompensator.capacitiveRating-valueRange
        a                sh:PropertyShape ;
        sh:description   "Shall always be positive." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative or zero." ;
        sh:minExclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:StaticVarCompensator.capacitiveRating:valueRange" ;
        sh:order         44 ;
        sh:path          cim:StaticVarCompensator.capacitiveRating ;
        sh:severity      sh:Violation .

equ:RotatingMachine.ratedS-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall have a positive value." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative or zero." ;
        sh:minExclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:RotatingMachine.ratedS:valueRange" ;
        sh:order         40 ;
        sh:path          cim:RotatingMachine.ratedS ;
        sh:severity      sh:Violation .

equ:TapChanger.highStep-valueRangePair
        a               sh:PropertyShape ;
        sh:description  "The attribute shall be greater than lowStep." ;
        sh:group        equ:EQ301UML ;
        sh:lessThan     cim:TapChanger.highStep ;
        sh:message      "The value of TapChanger.lowStep is greater than or equal to the value of TapChanger.highStep." ;
        sh:name         "C:301:EQ:TapChanger.highStep:valueRangePair" ;
        sh:order        48 ;
        sh:path         cim:TapChanger.lowStep ;
        sh:severity     sh:Violation .

equ:DCChopper  a       sh:NodeShape ;
        sh:property     equ:DCConductingEquipment.ratedUdc-valueRange ;
        sh:targetClass  cim:DCChopper .

equ:SolarGeneratingUnit
        a               sh:NodeShape ;
        sh:property     equ:GeneratingUnit.ratedNetMaxP-valueRange , equ:GeneratingUnit.ratedGrossMinP-valueRange , equ:GeneratingUnit.ratedGrossMaxP-valueRange ;
        sh:targetClass  cim:SolarGeneratingUnit .

equ:TapChanger.normalStep-valueRangePairFrom
        a                    sh:PropertyShape ;
        sh:description       "The attribute shall be equal to or greater than lowStep and equal to or less than highStep." ;
        sh:group             equ:EQ301UML ;
        sh:lessThanOrEquals  cim:TapChanger.normalStep ;
        sh:message           "The value of TapChanger.lowStep is greater than the value of TapChanger.normalStep." ;
        sh:name              "C:301:EQ:TapChanger.normalStep:valueRangePairFrom" ;
        sh:order             51 ;
        sh:path              cim:TapChanger.lowStep ;
        sh:severity          sh:Violation .

equ:PowerTransformerEnd
        a               sh:NodeShape ;
        sh:property     equ:PowerTransformerEnd.ratedS-valueRange , equ:PowerTransformerEnd.r-valueRange ;
        sh:targetClass  cim:PowerTransformerEnd .

equ:ShuntCompensator.normalSections-valueRangePair
        a                    sh:PropertyShape ;
        sh:description       "The value shall be between zero and ShuntCompensator.maximumSections." ;
        sh:group             equ:EQ301UML ;
        sh:lessThanOrEquals  cim:ShuntCompensator.maximumSections ;
        sh:message           "The value is either negative or greater than ShuntCompensator.maximumSections." ;
        sh:minInclusive      "0.0"^^xsd:float ;
        sh:name              "C:301:EQ:ShuntCompensator.normalSections:valueRangePair" ;
        sh:order             43 ;
        sh:path              cim:ShuntCompensator.normalSections ;
        sh:severity          sh:Violation .



equ:RotatingMachine.ratedPowerFactor-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute cannot be a negative value." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative." ;
        sh:minInclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:RotatingMachine.ratedPowerFactor:valueRange" ;
        sh:order         39 ;
        sh:path          cim:RotatingMachine.ratedPowerFactor ;
        sh:severity      sh:Violation .

equ:DCDisconnector  a  sh:NodeShape ;
        sh:property     equ:DCConductingEquipment.ratedUdc-valueRange ;
        sh:targetClass  cim:DCDisconnector .

equ:StaticVarCompensator
        a               sh:NodeShape ;
        sh:property     equ:StaticVarCompensator.slope-valueRange , equ:StaticVarCompensator.inductiveRating-valueRange , equ:StaticVarCompensator.capacitiveRating-valueRange  ;
        sh:targetClass  cim:StaticVarCompensator .

equ:DCConductingEquipment.ratedUdc-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall be a positive value." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative or zero." ;
        sh:minExclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:DCConductingEquipment.ratedUdc:valueRange" ;
        sh:order         30 ;
        sh:path          cim:DCConductingEquipment.ratedUdc ;
        sh:severity      sh:Violation .

equ:Switch  a          sh:NodeShape ;
        sh:property     equ:Switch.ratedCurrent-valueRange , equ:Switch-numberOfTerminals;
        sh:targetClass  cim:Switch .

equ:DisconnectingCircuitBreaker
        a               sh:NodeShape ;
        sh:property     equ:Switch.ratedCurrent-valueRange , equ:Switch-numberOfTerminals;
        sh:targetClass  cim:DisconnectingCircuitBreaker .

equ:GeneratingUnit.ratedGrossMinP-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall be a positive value." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative or zero." ;
        sh:minExclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:GeneratingUnit.ratedGrossMinP:valueRange" ;
        sh:order         32 ;
        sh:path          cim:GeneratingUnit.ratedGrossMinP ;
        sh:severity      sh:Violation .




equ:TapChanger.normalStep-valueRangePairTo
        a                    sh:PropertyShape ;
        sh:description       "The attribute shall be equal to or greater than lowStep and equal to or less than highStep." ;
        sh:group             equ:EQ301UML ;
        sh:lessThanOrEquals  cim:TapChanger.highStep ;
        sh:message           "The value of TapChanger.normalStep is greater than the value of TapChanger.highStep." ;
        sh:name              "C:301:EQ:TapChanger.normalStep:valueRangePairTo" ;
        sh:order             52 ;
        sh:path              cim:TapChanger.normalStep ;
        sh:severity          sh:Violation .

equ:GeneratingUnit.ratedNetMaxP-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall be a positive value." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative or zero." ;
        sh:minExclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:GeneratingUnit.ratedNetMaxP:valueRange" ;
        sh:order         33 ;
        sh:path          cim:GeneratingUnit.ratedNetMaxP ;
        sh:severity      sh:Violation .

equ:CsConverter.maxIdc-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall be a positive value." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative or zero." ;
        sh:minExclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:CsConverter.maxIdc:valueRange" ;
        sh:order         24 ;
        sh:path          cim:CsConverter.maxIdc ;
        sh:severity      sh:Violation .

equ:AsynchronousMachine
        a               sh:NodeShape ;
        sh:property     equ:RotatingMachine.ratedU-valueRange , equ:RotatingMachine.ratedS-valueRange , equ:RotatingMachine.ratedPowerFactor-valueRange ;
        sh:targetClass  cim:AsynchronousMachine .

equ:EquivalentInjection
        a               sh:NodeShape ;
        sh:property     equ:EquivalentInjection.regulationCapability-associatedCurve;
        sh:targetClass  cim:EquivalentInjection .

equ:CurrentLimit  a    sh:NodeShape ;
        sh:property     equ:CurrentLimit.normalValue-valueRange ;
        sh:targetClass  cim:CurrentLimit .

equ:PhaseTapChangerAsymmetrical
        a               sh:NodeShape ;
        sh:property     equ:TapChanger.normalStep-valueRangePairTo , equ:TapChanger.normalStep-valueRangePairFrom , equ:TapChanger.neutralStep-valueRangePairTo , equ:TapChanger.neutralStep-valueRangePairFrom , equ:TapChanger.highStep-valueRangePair , equ:PhaseTapChangerAsymmetrical.windingConnectionAngle-valueRange , equ:PhaseTapChangerNonLinear.xMin-valueRangePair;
        sh:targetClass  cim:PhaseTapChangerAsymmetrical .

equ:BatteryUnit.ratedE-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall be a positive value." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative or zero." ;
        sh:minExclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:BatteryUnit.ratedE:valueRange" ;
        sh:order         11 ;
        sh:path          cim:BatteryUnit.ratedE ;
        sh:severity      sh:Violation .

equ:NonlinearShuntCompensator
        a               sh:NodeShape ;
        sh:property     equ:ShuntCompensator.normalSections-valueRangePair , equ:ShuntCompensator-numberOfTerminals , equ:ShuntCompensator.nomU-nominalVoltageDifference;
        sh:targetClass  cim:NonlinearShuntCompensator .



equ:BoundaryPoint.toEndIsoCode-stringLength
        a               sh:PropertyShape ;
        sh:description  "The length of the string is 2 characters maximum." ;
        sh:group        equ:EQ301UML ;
        sh:maxLength    2 ;
        sh:message      "String length is not 2 characters." ;
        sh:minLength    2 ;
        sh:name         "C:301:EQ:BoundaryPoint.toEndIsoCode:stringLength" ;
        sh:order        15 ;
        sh:path         eu:BoundaryPoint.toEndIsoCode ;
        sh:severity     sh:Violation .

equ:ActivePowerLimit.normalValue-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall be a positive value or zero." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative." ;
        sh:minInclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:ActivePowerLimit.normalValue:valueRange" ;
        sh:order         8 ;
        sh:path          cim:ActivePowerLimit.normalValue ;
        sh:severity      sh:Violation .

equ:DCBusbar  a        sh:NodeShape ;
        sh:property     equ:DCConductingEquipment.ratedUdc-valueRange ;
        sh:targetClass  cim:DCBusbar .

equ:DCShunt  a         sh:NodeShape ;
        sh:property     equ:DCConductingEquipment.ratedUdc-valueRange ;
        sh:targetClass  cim:DCShunt .

equ:WindGeneratingUnit
        a               sh:NodeShape ;
        sh:property     equ:GeneratingUnit.ratedNetMaxP-valueRange , equ:GeneratingUnit.ratedGrossMinP-valueRange , equ:GeneratingUnit.ratedGrossMaxP-valueRange ;
        sh:targetClass  cim:WindGeneratingUnit .

equ:DCGround  a        sh:NodeShape ;
        sh:property     equ:DCConductingEquipment.ratedUdc-valueRange ;
        sh:targetClass  cim:DCGround .

equ:Clamp  a           sh:NodeShape ;
        sh:property     equ:Clamp.lengthFromTerminal1-length;
        sh:targetClass  cim:Clamp .

equ:RotatingMachine.ratedU-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall be a positive value." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative or zero." ;
        sh:minExclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:RotatingMachine.ratedU:valueRange" ;
        sh:order         41 ;
        sh:path          cim:RotatingMachine.ratedU ;
        sh:severity      sh:Violation .

equ:PowerTransformer
        a               sh:NodeShape ;
        sh:property     equ:PowerTransformer-associationNotUsed , equ:PowerTransformerEnd.ratedS-valueRange2winding , equ:PowerTransformerEnd.ratedU-valueRange , equ:TransformerEnd.endNumber-unique;
        sh:targetClass  cim:PowerTransformer .

equ:PhaseTapChangerLinear
        a               sh:NodeShape ;
        sh:property     equ:TapChanger.normalStep-valueRangePairTo , equ:TapChanger.normalStep-valueRangePairFrom , equ:TapChanger.neutralStep-valueRangePairTo , equ:TapChanger.neutralStep-valueRangePairFrom , equ:TapChanger.highStep-valueRangePair , equ:PhaseTapChangerLinear.xMin-valueRangePair ;
        sh:targetClass  cim:PhaseTapChangerLinear .

equ:DCSeriesDevice  a  sh:NodeShape ;
        sh:property     equ:DCConductingEquipment.ratedUdc-valueRange ;
        sh:targetClass  cim:DCSeriesDevice .

equ:DCBreaker  a       sh:NodeShape ;
        sh:property     equ:DCConductingEquipment.ratedUdc-valueRange ;
        sh:targetClass  cim:DCBreaker .

equ:BaseVoltage  a     sh:NodeShape ;
        sh:property     equ:BaseVoltage.nominalVoltage-valueRange ;
        sh:targetClass  cim:BaseVoltage .

equ:ActivePowerLimit
        a               sh:NodeShape ;
        sh:property    equ:ActivePowerLimit.normalValue-valueRange ;
        sh:targetClass  cim:ActivePowerLimit .

equ:ACDCConverter.minUdc-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall be a positive value." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative or zero." ;
        sh:minExclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:ACDCConverter.minUdc:valueRange" ;
        sh:order         4 ;
        sh:path          cim:ACDCConverter.minUdc ;
        sh:severity      sh:Violation .

equ:LinearShuntCompensator
        a               sh:NodeShape ;
        sh:property     equ:ShuntCompensator.normalSections-valueRangePair ,equ:ShuntCompensator-numberOfTerminals , equ:ShuntCompensator.nomU-nominalVoltageDifference;
        sh:targetClass  cim:LinearShuntCompensator .

equ:CsConverter.minIdc-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall be a positive value." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative or zero." ;
        sh:minExclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:CsConverter.minIdc:valueRange" ;
        sh:order         27 ;
        sh:path          cim:CsConverter.minIdc ;
        sh:severity      sh:Violation .

equ:TapChanger.neutralStep-valueRangePairTo
        a                    sh:PropertyShape ;
        sh:description       "The attribute shall be equal to or greater than lowStep and equal or less than highStep." ;
        sh:group             equ:EQ301UML ;
        sh:lessThanOrEquals  cim:TapChanger.highStep ;
        sh:message           "The value of TapChanger.neutralStep is greater than the value of TapChanger.highStep." ;
        sh:name              "C:301:EQ:TapChanger.neutralStep:valueRangePairTo" ;
        sh:order             50 ;
        sh:path              cim:TapChanger.neutralStep ;
        sh:severity          sh:Violation .


equ:TapChanger.neutralStep-valueRangePairFrom
        a                    sh:PropertyShape ;
        sh:description       "The attribute shall be equal to or greater than lowStep and equal or less than highStep." ;
        sh:group             equ:EQ301UML ;
        sh:lessThanOrEquals  cim:TapChanger.neutralStep ;
        sh:message           "The value of TapChanger.lowStep is greater than the value of TapChanger.neutralStep." ;
        sh:name              "C:301:EQ:TapChanger.neutralStep:valueRangePairFrom" ;
        sh:order             49 ;
        sh:path              cim:TapChanger.lowStep ;
        sh:severity          sh:Violation .


equ:VsConverter  a     sh:NodeShape ;
        sh:property     equ:ACDCConverter.idleLoss-valueRange , equ:ACDCConverter.minUdc-valueRange , equ:ACDCConverter.resistiveLoss-valueRange , equ:ACDCConverter.ratedUdc-valueRange , equ:ACDCConverter.maxUdc-valueRange , equ:VsConverter.maxModulationIndex-valueRangeTypical , equ:ACDCConverter.switchingLoss-valueRange , equ:ACDCConverter.baseS-valueRange ;
        sh:targetClass  cim:VsConverter .

equ:ACDCConverter.idleLoss-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall be a positive value." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative or zero." ;
        sh:minExclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:ACDCConverter.idleLoss:valueRange" ;
        sh:order         2 ;
        sh:path          cim:ACDCConverter.idleLoss ;
        sh:severity      sh:Violation .


equ:CsConverter.maxAlpha-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall be a positive value." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative or zero." ;
        sh:minExclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:CsConverter.maxAlpha:valueRange" ;
        sh:order         22 ;
        sh:path          cim:CsConverter.maxAlpha ;
        sh:severity      sh:Violation .

equ:RegulatingControl
        a               sh:NodeShape ;
        sh:property     equ:RegulatingControl-terminalConnectivityNode;
        sh:targetClass  cim:RegulatingControl .

equ:PowerTransformerEnd.ratedS-valueRange
        a                sh:PropertyShape ;
        sh:description   "The attribute shall be a positive value. " ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative or zero." ;
        sh:minExclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:PowerTransformerEnd.ratedS:valueRange" ;
        sh:order         38 ;
        sh:path          cim:PowerTransformerEnd.ratedS ;
        sh:severity      sh:Violation .

equ:PhaseTapChangerSymmetrical
        a               sh:NodeShape ;
        sh:property     equ:TapChanger.normalStep-valueRangePairTo , equ:TapChanger.normalStep-valueRangePairFrom , equ:TapChanger.neutralStep-valueRangePairTo , equ:TapChanger.neutralStep-valueRangePairFrom , equ:TapChanger.highStep-valueRangePair , equ:PhaseTapChangerNonLinear.xMin-valueRangePair;
        sh:targetClass  cim:PhaseTapChangerSymmetrical .

       
equ:RegularTimePoint.sequenceNumber-valueRange
        a                sh:PropertyShape ;
        sh:description   "The sequence number cannot be negative." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative." ;
        sh:minInclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:RegularTimePoint.sequenceNumber:valueRange" ;
        sh:order         55 ;
        sh:path          cim:RegularTimePoint.sequenceNumber ;
        sh:severity      sh:Violation .

equ:RegularTimePoint
        a               sh:NodeShape ;
        sh:property     equ:RegularTimePoint.sequenceNumber-valueRange ;
        sh:targetClass  cim:RegularTimePoint .
        
equ:BoundaryPoint
        a               sh:NodeShape ;
        sh:property     equ:BoundaryPoint.fromEndIsoCode-valueValidity, equ:BoundaryPoint.toEndIsoCode-valueValidity ;
        sh:targetClass  eu:BoundaryPoint .


equ:BoundaryPoint.fromEndIsoCode-valueValidity
        a               sh:PropertyShape ;
        sh:description  "The ISO code is a two-character country code as defined by ISO 3166 (http://www.iso.org/iso/country_codes)." ;
        sh:message      "Not valid two-character ISO code for Europe." ;
        sh:name         "C:301:EQ:BoundaryPoint.fromEndIsoCode:valueValidity" ;
        sh:in           ( "AL" "AT" "BE" "BG" "HR" "CY" "CZ" "DK" "EE" "FI" "FR" "DE" "GR" "HU" "IS" "IE" "IT" "LV" "LI" "LT" "LU" "MT" "MD" "ME" "NL" "NO" "PL" "PT" "RO" "RS" "SK" "SI" "ES" "SE" "CH" "TR" "UA" "MK" "GB" "BA" "BY" "TN" "MA" "RU") ;
        sh:minLength     2 ;
        sh:maxLength     2 ;
        sh:group        equ:EQ301UML ;
        sh:order        56 ;
        sh:path         eu:BoundaryPoint.fromEndIsoCode ;
        sh:severity     sh:Violation .

equ:BoundaryPoint.toEndIsoCode-valueValidity
        a               sh:PropertyShape ;
        sh:description  "The ISO code is a two-character country code as defined by ISO 3166 (http://www.iso.org/iso/country_codes)." ;
        sh:message      "Not valid two-character ISO code for Europe." ;
        sh:name         "C:301:EQ:BoundaryPoint.toEndIsoCode:valueValidity" ;
        sh:in           ( "AL" "AT" "BE" "BG" "HR" "CY" "CZ" "DK" "EE" "FI" "FR" "DE" "GR" "HU" "IS" "IE" "IT" "LV" "LI" "LT" "LU" "MT" "MD" "ME" "NL" "NO" "PL" "PT" "RO" "RS" "SK" "SI" "ES" "SE" "CH" "TR" "UA" "MK" "GB" "BA" "BY" "TN" "MA" "RU") ;
        sh:minLength     2 ;
        sh:maxLength     2 ;
        sh:group        equ:EQ301UML ;
        sh:order        57 ;
        sh:path         eu:BoundaryPoint.toEndIsoCode ;
        sh:severity     sh:Violation .                

equ:Equipment  a  sh:NodeShape ;
        sh:property     equ:Equipment.aggregate-notUsed ;
        sh:targetClass  cim:EquivalentBranch , cim:EquivalentShunt , cim:EquivalentInjection .

equ:Equipment.aggregate-notUsed
        a               sh:PropertyShape ;
        sh:sparql       equ:Equipment.aggregate-notUsedSparql ;
        sh:description  "The attribute is not used for EquivalentBranch, EquivalentShunt and EquivalentInjection." ;
        sh:name         "C:301:EQ:Equipment.aggregate:notUsed" ;
        sh:path         cim:Equipment.aggregate ;
        sh:group        equ:EQ301UML ;
        sh:order        58 ;
        sh:severity     sh:Violation .
        
equ:Equipment.aggregate-notUsedSparql
		a         sh:SPARQLConstraint ;  
		sh:message "Not allowed property (attribute)." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value
			WHERE {
        OPTIONAL {$this $PATH ?value }.
        FILTER (bound(?value)) .
			}""" .        
      

equ:EquivalentBranch.r21-usage
        a               sh:PropertyShape ;
        sh:sparql       equ:EquivalentBranch.r21-usageSparql ;
        sh:description  "This attribute is optional and represent unbalanced network such as off-nominal phase shifter. If only EquivalentBranch.r is given, then EquivalentBranch.r21 is assumed equal to EquivalentBranch.r." ;
        sh:name         "C:301:EQ:EquivalentBranch.r21:usage" ;
        sh:path         cim:EquivalentBranch.r21 ;
        sh:group        equ:EQ301UML ;
        sh:order        59 ;
        sh:severity     sh:Info .
        
equ:EquivalentBranch.r21-usageSparql
		a         sh:SPARQLConstraint ;  
		sh:message "Asymmetrical EquivalentBranch is modelled as EquivalentBranch.r is different from EquivalentBranch.r21." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value
			WHERE {
        OPTIONAL {$this $PATH ?value }.
        $this cim:EquivalentBranch.r ?r .
        FILTER (bound(?value) && ?value!=?r) .
			}""" .  
      
equ:EquivalentBranch.x21-usage
        a               sh:PropertyShape ;
        sh:sparql       equ:EquivalentBranch.x21-usageSparql ;
        sh:description  "This attribute is optional and represent unbalanced network such as off-nominal phase shifter. If only EquivalentBranch.x is given, then EquivalentBranch.x21 is assumed equal to EquivalentBranch.x." ;
        sh:name         "C:301:EQ:EquivalentBranch.x21:usage" ;
        sh:path         cim:EquivalentBranch.x21 ;
        sh:group        equ:EQ301UML ;
        sh:order        60 ;
        sh:severity     sh:Info .
        
equ:EquivalentBranch.x21-usageSparql
		a         sh:SPARQLConstraint ;  
		sh:message "Asymmetrical EquivalentBranch is modelled as EquivalentBranch.x is different from EquivalentBranch.x21." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value
			WHERE {
        OPTIONAL {$this $PATH ?value }.
        $this cim:EquivalentBranch.x ?x .
        FILTER (bound(?value) && ?value!=?x) .
			}""" .      


equ:EquivalentInjection.regulationCapability-associatedCurve
        a               sh:PropertyShape ;
        sh:sparql       equ:EquivalentInjection.regulationCapability-associatedCurveSparql ;
        sh:description  "ReactiveCapabilityCurve can only be associated with EquivalentInjection  if the flag is true." ;
        sh:name         "C:301:EQ:EquivalentInjection.regulationCapability:associatedCurve" ;
        sh:path         cim:EquivalentInjection.regulationCapability ;
        sh:group        equ:EQ301UML ;
        sh:order        61 ;
        sh:severity     sh:Violation .
        
equ:EquivalentInjection.regulationCapability-associatedCurveSparql
		a         sh:SPARQLConstraint ;  
		sh:message "The value does not allow a ReactiveCapabilityCurve to be associated. " ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value
			WHERE {
        $this $PATH ?value
        OPTIONAL {$this cim:EquivalentInjection.ReactiveCapabilityCurve ?curve }.
        FILTER (bound(?curve) && ?value=false) .
			}""" .

equ:Clamp.lengthFromTerminal1-length
        a                sh:PropertyShape ;
        sh:description   "It shall be a positive value or zero." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative." ;
        sh:minInclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:Length:valueRange" ;
        sh:order         62 ;
        sh:path          cim:Clamp.lengthFromTerminal1 ;
        sh:severity      sh:Violation .
        
equ:Conductor.length-length
        a                sh:PropertyShape ;
        sh:description   "It shall be a positive value or zero." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative." ;
        sh:minInclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:Length:valueRange" ;
        sh:order         63 ;
        sh:path          cim:Conductor.length ;
        sh:severity      sh:Violation .  

equ:Cut.lengthFromTerminal1-length
        a                sh:PropertyShape ;
        sh:description   "It shall be a positive value or zero." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative." ;
        sh:minInclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:Length:valueRange" ;
        sh:order         64 ;
        sh:path          cim:Cut.lengthFromTerminal1 ;
        sh:severity      sh:Violation .   

equ:DCLineSegment.length-length
        a                sh:PropertyShape ;
        sh:description   "It shall be a positive value or zero." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative." ;
        sh:minInclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:Length:valueRange" ;
        sh:order         65 ;
        sh:path          cim:DCLineSegment.length ;
        sh:severity      sh:Violation . 

equ:HydroGeneratingUnit.dropHeight-length
        a                sh:PropertyShape ;
        sh:description   "It shall be a positive value or zero." ;
        sh:group         equ:EQ301UML ;
        sh:message       "The value is negative." ;
        sh:minInclusive  "0.0"^^xsd:float ;
        sh:name          "C:301:EQ:Length:valueRange" ;
        sh:order         66 ;
        sh:path          cim:HydroGeneratingUnit.dropHeight ;
        sh:severity      sh:Violation .        


equ:LoadResponseCharacteristic  a  sh:NodeShape ;
        sh:property     equ:LoadResponseCharacteristic.exponentModel-exponentCoefficient ;
        sh:targetClass  cim:LoadResponseCharacteristic .

equ:LoadResponseCharacteristic.exponentModel-exponentCoefficient
        a               sh:PropertyShape ;
        sh:sparql       equ:LoadResponseCharacteristic.exponentModel-exponentCoefficientSparql ;
        sh:description  "Indicates the exponential voltage dependency model is to be used. If false, the coefficient model is to be used. The exponential voltage dependency model consist of the attributes:- pVoltageExponent; - qVoltageExponent; - pFrequencyExponent; - qFrequencyExponent. The coefficient model consist of the attributes:- pConstantImpedance; - pConstantCurrent; - pConstantPower; - qConstantImpedance; - qConstantCurrent; - qConstantPower. The sum of pConstantImpedance, pConstantCurrent and pConstantPower shall equal 1. The sum of qConstantImpedance, qConstantCurrent and qConstantPower shall equal 1." ;
        sh:name         "C:301:EQ:LoadResponseCharacteristic.exponentModel:exponent|C:301:EQ:LoadResponseCharacteristic.exponentModel:coefficient|C:301:EQ:LoadResponseCharacteristic.exponentModel:coefficientSum" ;
        sh:path         cim:LoadResponseCharacteristic.exponentModel ;
        sh:group        equ:EQ301UML ;
        sh:order        67 ;
        sh:severity     sh:Violation .
        
equ:LoadResponseCharacteristic.exponentModel-exponentCoefficientSparql
		a         sh:SPARQLConstraint ;  
		sh:message "One of the following occurs: 1) Missing required properties (attributes) for either exponential voltage dependency model or exponential model. 2) There is a mixture between the attributes. 3) The sum of either all active power related coefficients or reactive power related coefficients does not equal 1." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value
			WHERE {
        $this $PATH ?value .
        
        OPTIONAL {$this cim:LoadResponseCharacteristic.pFrequencyExponent ?pfe }.
        OPTIONAL {$this cim:LoadResponseCharacteristic.pVoltageExponent ?pve }.
        OPTIONAL {$this cim:LoadResponseCharacteristic.qFrequencyExponent ?qfe }.
        OPTIONAL {$this cim:LoadResponseCharacteristic.qVoltageExponent ?qve }.
        OPTIONAL {$this cim:LoadResponseCharacteristic.pConstantCurrent ?pcc }.
        OPTIONAL {$this cim:LoadResponseCharacteristic.pConstantImpedance ?pci }.
        OPTIONAL {$this cim:LoadResponseCharacteristic.pConstantPower ?pcp }.
        OPTIONAL {$this cim:LoadResponseCharacteristic.qConstantCurrent ?qcc }.
        OPTIONAL {$this cim:LoadResponseCharacteristic.qConstantImpedance ?qci }.
        OPTIONAL {$this cim:LoadResponseCharacteristic.qConstantPower ?qcp }.
 
        FILTER ((?value=true && (!bound(?pfe) || !bound(?pve) || !bound(?qfe) || !bound(?qve) || bound(?pcc) || bound(?pci) || bound(?pcp) || bound(?qcc) || bound(?qci) || bound(?qcp))) ||
                (?value=false && (bound(?pfe) || bound(?pve) || bound(?qfe) || bound(?qve) || !bound(?pcc) || !bound(?pci) || !bound(?pcp) || !bound(?qcc) || !bound(?qci) || !bound(?qcp))) || 
                (?value=false && bound(?pcc) && bound(?pci) && bound(?pcp) && bound(?qcc) && bound(?qci) && bound(?qcp) && (?pcc+?pci+?pcp!=1 || ?qcc+?qci+?qcp!=1)  )
        ) .
			}""" .        
        
        

#equ:LoadResponseCharacteristic  a  sh:NodeShape ;
#        sh:property     equ:LoadResponseCharacteristic.exponentModel-exponent , equ:LoadResponseCharacteristic.exponentModel-coefficient , equ:LoadResponseCharacteristic.exponentModel-coefficientSum;
#        sh:targetClass  cim:LoadResponseCharacteristic .
#
#equ:LoadResponseCharacteristic.exponentModel-exponent
#        a               sh:PropertyShape ;
#        sh:sparql       equ:LoadResponseCharacteristic.exponentModel-exponentSparql ;
#        sh:description  "Indicates the exponential voltage dependency model is to be used. If false, the coefficient model is to be used. The exponential voltage dependency model consist of the attributes:- pVoltageExponent; - qVoltageExponent; - pFrequencyExponent; - qFrequencyExponent." ;
#        sh:name         "C:301:EQ:LoadResponseCharacteristic.exponentModel:exponent" ;
#        sh:path         cim:LoadResponseCharacteristic.exponentModel ;
#        sh:group        equ:EQ301UML ;
#        sh:order        67 ;
#        sh:severity     sh:Violation .
#        
#equ:LoadResponseCharacteristic.exponentModel-exponentSparql
#		a         sh:SPARQLConstraint ;  
#		sh:message "Missing required properties (attributes) for exponential voltage dependency model or there is a mixture with attributes for coefficient model." ;
#		sh:prefixes cim: ;
#		sh:select """
#			SELECT  $this ?value
#			WHERE {
#        $this $PATH ?value .
#        BIND(EXISTS{$this cim:LoadResponseCharacteristic.pFrequencyExponent ?pfe} AS ?haspfe).
#        BIND(EXISTS{$this cim:LoadResponseCharacteristic.pVoltageExponent ?pve} AS ?haspve).
#        BIND(EXISTS{$this cim:LoadResponseCharacteristic.qFrequencyExponent ?qfe} AS ?hasqfe).
#        BIND(EXISTS{$this cim:LoadResponseCharacteristic.qVoltageExponent ?qve} AS ?hasqve).
#        BIND(EXISTS{$this cim:LoadResponseCharacteristic.pConstantCurrent ?pcc} AS ?haspcc).
#        BIND(EXISTS{$this cim:LoadResponseCharacteristic.pConstantImpedance ?pci} AS ?haspci).
#        BIND(EXISTS{$this cim:LoadResponseCharacteristic.pConstantPower ?pcp} AS ?haspcp).
#        BIND(EXISTS{$this cim:LoadResponseCharacteristic.qConstantCurrent ?qcc } AS ?hasqcc).
#        BIND(EXISTS{$this cim:LoadResponseCharacteristic.qConstantImpedance ?qci} AS ?hasqci).
#        BIND(EXISTS{$this cim:LoadResponseCharacteristic.qConstantPower ?qcp } AS ?hasqcp).
#        
#        
#        #OPTIONAL {$this cim:LoadResponseCharacteristic.pFrequencyExponent ?pfe }.
#        #OPTIONAL {$this cim:LoadResponseCharacteristic.pVoltageExponent ?pve }.
#        #OPTIONAL {$this cim:LoadResponseCharacteristic.qFrequencyExponent ?qfe }.
#        #OPTIONAL {$this cim:LoadResponseCharacteristic.qVoltageExponent ?qve }.
#        #OPTIONAL {$this cim:LoadResponseCharacteristic.pConstantCurrent ?pcc }.
#        #OPTIONAL {$this cim:LoadResponseCharacteristic.pConstantImpedance ?pci }.
#        #OPTIONAL {$this cim:LoadResponseCharacteristic.pConstantPower ?pcp }.
#        #OPTIONAL {$this cim:LoadResponseCharacteristic.qConstantCurrent ?qcc }.
#        #OPTIONAL {$this cim:LoadResponseCharacteristic.qConstantImpedance ?qci }.
#        #OPTIONAL {$this cim:LoadResponseCharacteristic.qConstantPower ?qcp }.
#        #FILTER (?value=true && (!bound(?pfe) || !bound(?pve) || !bound(?qfe) || !bound(?qve) || bound(?pcc) || bound(?pci) || bound(?pcp) || bound(?qcc) || bound(?qci) || bound(?qcp))) .
#        FILTER (?value=true && (?haspfe=false || ?haspve=false || ?hasqfe=false || ?hasqve=false || ?haspcc=true || ?haspci=true || ?haspcp=true || ?hasqcc=true || ?hasqci=true || ?hasqcp=true)) .
#			}""" .  
#
#equ:LoadResponseCharacteristic.exponentModel-coefficient
#        a               sh:PropertyShape ;
#        sh:sparql       equ:LoadResponseCharacteristic.exponentModel-coefficientSparql ;
#        sh:description  "The coefficient model consist of the attributes:- pConstantImpedance; - pConstantCurrent; - pConstantPower; - qConstantImpedance; - qConstantCurrent; - qConstantPower." ;
#        sh:name         "C:301:EQ:LoadResponseCharacteristic.exponentModel:coefficient" ;
#        sh:path         cim:LoadResponseCharacteristic.exponentModel ;
#        sh:group        equ:EQ301UML ;
#        sh:order        68 ;
#        sh:severity     sh:Violation .
#        
#equ:LoadResponseCharacteristic.exponentModel-coefficientSparql
#		a         sh:SPARQLConstraint ;  
#		sh:message "Missing required properties (attributes) for coefficient model or there is a mixture with attributes for exponential model." ;
#		sh:prefixes cim: ;
#		sh:select """
#			SELECT  $this ?value
#			WHERE {
#        $this $PATH ?value .
#        BIND(EXISTS{$this cim:LoadResponseCharacteristic.pFrequencyExponent ?pfe} AS ?haspfe).
#        BIND(EXISTS{$this cim:LoadResponseCharacteristic.pVoltageExponent ?pve} AS ?haspve).
#        BIND(EXISTS{$this cim:LoadResponseCharacteristic.qFrequencyExponent ?qfe} AS ?hasqfe).
#        BIND(EXISTS{$this cim:LoadResponseCharacteristic.qVoltageExponent ?qve} AS ?hasqve).
#        BIND(EXISTS{$this cim:LoadResponseCharacteristic.pConstantCurrent ?pcc} AS ?haspcc).
#        BIND(EXISTS{$this cim:LoadResponseCharacteristic.pConstantImpedance ?pci} AS ?haspci).
#        BIND(EXISTS{$this cim:LoadResponseCharacteristic.pConstantPower ?pcp} AS ?haspcp).
#        BIND(EXISTS{$this cim:LoadResponseCharacteristic.qConstantCurrent ?qcc } AS ?hasqcc).
#        BIND(EXISTS{$this cim:LoadResponseCharacteristic.qConstantImpedance ?qci} AS ?hasqci).
#        BIND(EXISTS{$this cim:LoadResponseCharacteristic.qConstantPower ?qcp } AS ?hasqcp).
#        
#        
#        #OPTIONAL {$this cim:LoadResponseCharacteristic.pConstantCurrent ?pcc }.
#        #OPTIONAL {$this cim:LoadResponseCharacteristic.pConstantImpedance ?pci }.
#        #OPTIONAL {$this cim:LoadResponseCharacteristic.pConstantPower ?pcp }.
#        #OPTIONAL {$this cim:LoadResponseCharacteristic.qConstantCurrent ?qcc }.
#        #OPTIONAL {$this cim:LoadResponseCharacteristic.qConstantImpedance ?qci }.
#        #OPTIONAL {$this cim:LoadResponseCharacteristic.qConstantPower ?qcp }.
#        #OPTIONAL {$this cim:LoadResponseCharacteristic.pFrequencyExponent ?pfe }.
#        #OPTIONAL {$this cim:LoadResponseCharacteristic.pVoltageExponent ?pve }.
#        #OPTIONAL {$this cim:LoadResponseCharacteristic.qFrequencyExponent ?qfe }.
#        #OPTIONAL {$this cim:LoadResponseCharacteristic.qVoltageExponent ?qve }.
#        FILTER (?value=false && (?haspcc=false || ?haspci=false || ?haspcp=false || ?hasqcc=false || ?hasqci=false || ?hasqcp=false || ?haspfe=true || ?haspve=true || ?hasqfe=true || ?hasqve=true)) .
#			}""" .       
#
#equ:LoadResponseCharacteristic.exponentModel-coefficientSum
#        a               sh:PropertyShape ;
#        sh:sparql       equ:LoadResponseCharacteristic.exponentModel-coefficientSumSparql ;
#        sh:description  "The sum of pConstantImpedance, pConstantCurrent and pConstantPower shall equal 1. The sum of qConstantImpedance, qConstantCurrent and qConstantPower shall equal 1." ;
#        sh:name         "C:301:EQ:LoadResponseCharacteristic.exponentModel:coefficientSum" ;
#        sh:path         cim:LoadResponseCharacteristic.exponentModel ;
#        sh:group        equ:EQ301UML ;
#        sh:order        69 ;
#        sh:severity     sh:Violation .
#        
#equ:LoadResponseCharacteristic.exponentModel-coefficientSumSparql
#		a         sh:SPARQLConstraint ;  
#		sh:message "The sum of either all active power related coefficients or reactive power related coefficients does not equal 1. " ;
#		sh:prefixes cim: ;
#		sh:select """
#			SELECT  $this ?value
#			WHERE {
#        $this $PATH ?value .
#        $this cim:LoadResponseCharacteristic.pConstantCurrent ?pcc .
#        $this cim:LoadResponseCharacteristic.pConstantImpedance ?pci .
#        $this cim:LoadResponseCharacteristic.pConstantPower ?pcp .
#        $this cim:LoadResponseCharacteristic.qConstantCurrent ?qcc .
#        $this cim:LoadResponseCharacteristic.qConstantImpedance ?qci .
#        $this cim:LoadResponseCharacteristic.qConstantPower ?qcp .
#        
#        BIND(EXISTS{$this cim:LoadResponseCharacteristic.pConstantCurrent ?a} AS ?haspcc).
#        BIND(EXISTS{$this cim:LoadResponseCharacteristic.pConstantImpedance ?b} AS ?haspci).
#        BIND(EXISTS{$this cim:LoadResponseCharacteristic.pConstantPower ?c} AS ?haspcp).
#        BIND(EXISTS{$this cim:LoadResponseCharacteristic.qConstantCurrent ?d } AS ?hasqcc).
#        BIND(EXISTS{$this cim:LoadResponseCharacteristic.qConstantImpedance ?e} AS ?hasqci).
#        BIND(EXISTS{$this cim:LoadResponseCharacteristic.qConstantPower ?f } AS ?hasqcp).
#        
#        
#        #OPTIONAL {$this cim:LoadResponseCharacteristic.pConstantCurrent ?pcc }.
#        #OPTIONAL {$this cim:LoadResponseCharacteristic.pConstantImpedance ?pci }.
#        #OPTIONAL {$this cim:LoadResponseCharacteristic.pConstantPower ?pcp }.
#        #OPTIONAL {$this cim:LoadResponseCharacteristic.qConstantCurrent ?qcc }.
#        #OPTIONAL {$this cim:LoadResponseCharacteristic.qConstantImpedance ?qci }.
#        #OPTIONAL {$this cim:LoadResponseCharacteristic.qConstantPower ?qcp }.
#        FILTER (?value=false && ?haspcc=true && ?haspci=true && ?haspcp=true && ?hasqcc=true && ?hasqci=true && ?hasqcp=true && (?pcc+?pci+?pcp!=1 || ?qcc+?qci+?qcp!=1)) .
#			}""" .       
#
        
equ:PhaseTapChangerAsymmetrical.windingConnectionAngle-valueRange
        a               sh:PropertyShape ;
        sh:sparql       equ:PhaseTapChangerAsymmetrical.windingConnectionAngle-valueRangeSparql ;
        sh:description  "The attribute can only be multiples of 30 degrees.  The allowed range is -150 degrees to 150 degrees excluding 0." ;
        sh:name         "C:301:EQ:PhaseTapChangerAsymmetrical.windingConnectionAngle:valueRange" ;
        sh:path         cim:PhaseTapChangerAsymmetrical.windingConnectionAngle ;
        sh:group        equ:EQ301UML ;
        sh:order        70 ;
        sh:severity     sh:Violation .
        
    
equ:PhaseTapChangerAsymmetrical.windingConnectionAngle-valueRangeSparql
		a         sh:SPARQLConstraint ;  
		sh:message "The value is not an integer, multiples of 30 degrees in the range of -150 degrees to 150 degrees excluding 0." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value
			WHERE {
        $this $PATH ?value . 
        FILTER (contains(str(?value), ".") || (?value!=-150 && ?value!=-120 && ?value!=-90 && ?value!=-60 && ?value!=-30 && ?value!=150 && ?value!=120 && ?value!=90 && ?value!=60 && ?value!=30)) .        
			}""" .      

equ:GeneratingUnit.nominalP  a  sh:NodeShape ;
        sh:property     equ:GeneratingUnit.nominalP-valueRangePair ;
        sh:targetClass  cim:GeneratingUnit , cim:WindGeneratingUnit , cim:HydroGeneratingUnit , cim:NuclearGeneratingUnit , cim:SolarGeneratingUnit , cim:ThermalGeneratingUnit .
              
equ:GeneratingUnit.nominalP-valueRangePair
        a               sh:PropertyShape ;
        sh:sparql       equ:GeneratingUnit.nominalP-valueRangePairSparql ;
        sh:description  "The attribute shall be a positive value equal to or less than RotatingMachine.ratedS." ;
        sh:name         "C:301:EQ:GeneratingUnit.nominalP:valueRangePair" ;
        sh:path         cim:GeneratingUnit.nominalP ;
        sh:group        equ:EQ301UML ;
        sh:order        71 ;
        sh:severity     sh:Violation .
        
    
equ:GeneratingUnit.nominalP-valueRangePairSparql
		a         sh:SPARQLConstraint ;  
		sh:message "The value is either negative, zero or greater than RotatingMachine.ratedS." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value
			WHERE {
        $this $PATH ?value .
        BIND(EXISTS{$this $PATH ?v} AS ?hasvalue).
        #OPTIONAL {$this $PATH ?value }. 
        $this ^cim:RotatingMachine.GeneratingUnit/cim:RotatingMachine.ratedS ?rateds .
        BIND(EXISTS{$this ^cim:RotatingMachine.GeneratingUnit/cim:RotatingMachine.ratedS ?r} AS ?hasrateds).
        #OPTIONAL {$this ^cim:RotatingMachine.GeneratingUnit ?machine }. 
        #OPTIONAL {?machine cim:RotatingMachine.ratedS ?rateds }. 
        FILTER (?hasvalue=true && ?hasrateds=true && (?value<=0 || ?value>?rateds) ) .        
			}""" .         


equ:PhaseTapChangerLinear.xMin-valueRangePair
        a               sh:PropertyShape ;
        sh:sparql       equ:PhaseTapChangerLinear.xMin-valueRangePairSparql ;
        sh:description  "PowerTransformerEnd.x shall be consistent with PhaseTapChangerLinear.xMin and PhaseTapChangerNonLinear.xMin. In case of inconsistency, PowerTransformerEnd.x shall be used." ;
        sh:name         "C:301:EQ:PhaseTapChangerLinear.xMin:valueRangePair" ;
        sh:path         cim:PhaseTapChangerLinear.xMin ;
        sh:group        equ:EQ301UML ;
        sh:order        72 ;
        sh:severity     sh:Violation .
        
    
equ:PhaseTapChangerLinear.xMin-valueRangePairSparql
		a         sh:SPARQLConstraint ;  
		sh:message "Inconsistency between PowerTransformerEnd.x and PhaseTapChangerLinear.xMin." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value
			WHERE {
        $this $PATH ?value . 
        $this cim:PhaseTapChanger.TransformerEnd/cim:PowerTransformerEnd.x ?x . 
        #$this cim:PhaseTapChanger.TransformerEnd ?theend . 
        #?theend cim:PowerTransformerEnd.x ?x . 
        FILTER (?value!=?x ) .        
			}""" .  


equ:PhaseTapChangerNonLinear.xMin-valueRangePair
        a               sh:PropertyShape ;
        sh:sparql       equ:PhaseTapChangerNonLinear.xMin-valueRangePairSparql ;
        sh:description  "PowerTransformerEnd.x shall be consistent with PhaseTapChangerLinear.xMin and PhaseTapChangerNonLinear.xMin. In case of inconsistency, PowerTransformerEnd.x shall be used." ;
        sh:name         "C:301:EQ:PhaseTapChangerNonLinear.xMin:valueRangePair" ;
        sh:path         cim:PhaseTapChangerNonLinear.xMin ;
        sh:group        equ:EQ301UML ;
        sh:order        73 ;
        sh:severity     sh:Violation .
        
    
equ:PhaseTapChangerNonLinear.xMin-valueRangePairSparql
		a         sh:SPARQLConstraint ;  
		sh:message "Inconsistency between PowerTransformerEnd.x and PhaseTapChangerNonLinear.xMin." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value
			WHERE {
        $this $PATH ?value . 
        $this cim:PhaseTapChanger.TransformerEnd/cim:PowerTransformerEnd.x ?x . 
        #$this cim:PhaseTapChanger.TransformerEnd ?theend . 
        #?theend cim:PowerTransformerEnd.x ?x . 
        FILTER (?value!=?x ) .        
			}""" .  

equ:PowerTransformer-associationNotUsed
        a               sh:PropertyShape ;
        sh:sparql       equ:PowerTransformer-associationNotUsedSparql ;
        sh:path         rdf:type ;
        sh:description  "The inherited association ConductingEquipment.BaseVoltage should not be used.  The association from TransformerEnd to BaseVoltage should be used instead." ;
        sh:name         "C:301:EQ:PowerTransformer:associationNotUsed" ;
        sh:group        equ:EQ301UML ;
        sh:order        74 ;
        sh:severity     sh:Violation .
        
    
equ:PowerTransformer-associationNotUsedSparql
		a         sh:SPARQLConstraint ;  
		sh:message "The inherited association ConductingEquipment.BaseVoltage is used." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value
			WHERE {
        $this cim:ConductingEquipment.BaseVoltage ?value .
        BIND(EXISTS{$this cim:ConductingEquipment.BaseVoltage ?v } AS ?hasvalue). 
        FILTER (?hasvalue=true) .        
			}""" .  


equ:Switch-numberOfTerminals
        a               sh:PropertyShape ;
        sh:class        cim:Terminal ;
        sh:description  "All switches are two terminal devices including grounding switches. " ;
        sh:message      "The Switch (or subclass) does not have two terminals." ;
        sh:name         "C:301:EQ:Switch:numberOfTerminals" ;
        sh:minCount     2 ;
        sh:maxCount     2 ;
        sh:group        equ:EQ301UML ;
        sh:order        75 ;
        sh:path         [sh:inversePath  cim:Terminal.ConductingEquipment] ;
        sh:severity     sh:Violation .
        
equ:SeriesCompensator-numberOfTerminals
        a               sh:PropertyShape ;
        sh:class        cim:Terminal ;
        sh:description  "It is a two terminal device." ;
        sh:message      "The SeriesCompensator does not have two terminals." ;
        sh:name         "C:301:EQ:SeriesCompensator:numberOfTerminals" ;
        sh:minCount     2 ;
        sh:maxCount     2 ;
        sh:group        equ:EQ301UML ;
        sh:order        76 ;
        sh:path         [sh:inversePath  cim:Terminal.ConductingEquipment] ;
        sh:severity     sh:Violation .      

equ:ShuntCompensator-numberOfTerminals
        a               sh:PropertyShape ;
        sh:class        cim:Terminal ;
        sh:description  "ShuntCompensator is a single terminal device. " ;
        sh:message      "The ShuntCompensator does not have one terminal." ;
        sh:name         "C:301:EQ:ShuntCompensator:numberOfTerminals" ;
        sh:minCount     1 ;
        sh:maxCount     1 ;
        sh:group        equ:EQ301UML ;
        sh:order        77 ;
        sh:path         [sh:inversePath  cim:Terminal.ConductingEquipment] ;
        sh:severity     sh:Violation .          
        
equ:OperationalLimitType.acceptableDuration-usage
        a               sh:PropertyShape ;
        sh:sparql       equ:OperationalLimitType.acceptableDuration-usageSparql ;
        sh:description  "The attribute has meaning only if the flag isInfiniteDuration is set to false, hence it shall not be exchanged when isInfiniteDuration is set to true." ;
        sh:name         "C:301:EQ:OperationalLimitType.acceptableDuration:usage" ;
        sh:group        equ:EQ301UML ;
        sh:path         cim:OperationalLimitType.acceptableDuration ;
        sh:order        78 ;
        sh:severity     sh:Violation .
        
    
equ:OperationalLimitType.acceptableDuration-usageSparql
		a         sh:SPARQLConstraint ;  
		sh:message "The attribute is present and .isInfiniteDuration is set to true." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value
			WHERE {
        $this $PATH ?value .
        BIND(EXISTS{$this $PATH ?v } AS ?hasvalue). 
        $this cim:OperationalLimitType.isInfiniteDuration ?indur .
        FILTER (?hasvalue=true && ?indur=true ) .        
			}""" .         
      
equ:PowerTransformerEnd.r-valueRange
        a               sh:PropertyShape ;
        sh:sparql       equ:PowerTransformerEnd.r-valueRangeSparql ;
        sh:description  "The attribute shall be equal to or greater than zero for non-equivalent transformers." ;
        sh:name         "C:301:EQ:PowerTransformerEnd.r:valueRange" ;
        sh:group        equ:EQ301UML ;
        sh:path         cim:PowerTransformerEnd.r ;
        sh:order        79 ;
        sh:severity     sh:Violation .
        
    
equ:PowerTransformerEnd.r-valueRangeSparql
		a         sh:SPARQLConstraint ;  
		sh:message "The value is negative for a non-equivalent transformer." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value
			WHERE {
        $this $PATH ?value . 
        OPTIONAL {$this cim:Equipment.aggregate ?aggregate }.
        #BIND(EXISTS{$this cim:Equipment.aggregate ?a } AS ?hasaggregate).
        FILTER ((!bound(?aggregate) || ?aggregate=false) && ?value<0 ) .        
			}""" .     

equ:PowerTransformerEnd.ratedS-valueRange2winding
        a               sh:PropertyShape ;
        sh:sparql       equ:PowerTransformerEnd.ratedS-valueRange2windingSparql ;
        sh:path         rdf:type ;
        sh:description  "For a two-winding transformer the values for the high and low voltage sides shall be identical. " ;
        sh:name         "C:301:EQ:PowerTransformerEnd.ratedS:valueRange2winding" ;
        sh:group        equ:EQ301UML ;
        sh:order        80 ;
        sh:severity     sh:Violation .
        
    
equ:PowerTransformerEnd.ratedS-valueRange2windingSparql
		a         sh:SPARQLConstraint ;  
		sh:message "The value is different for a two-winding transformer." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value ?ends
			WHERE {
        {
        SELECT $this (COUNT(?typeend) AS ?ends)
        WHERE {
        $this ^cim:PowerTransformerEnd.PowerTransformer/rdf:type ?typeend .
        }
        GROUP BY $this ?typeend
        }
        
        ?end1 cim:PowerTransformerEnd.PowerTransformer $this .
        ?end1 cim:TransformerEnd.endNumber  1.
        ?end1 cim:PowerTransformerEnd.ratedS  ?value .
        #OPTIONAL {?end1 cim:PowerTransformerEnd.ratedS  ?value }.
        BIND(EXISTS{?end1 cim:PowerTransformerEnd.ratedS  ?v} AS ?hasvalue).
        ?end2 cim:PowerTransformerEnd.PowerTransformer $this  .
        ?end2 cim:TransformerEnd.endNumber  2 .
        ?end2 cim:PowerTransformerEnd.ratedS  ?ratedsend2 .
        BIND(EXISTS{?end2 cim:PowerTransformerEnd.ratedS  ?r} AS ?hasratedsend2).
        #OPTIONAL {?end2 cim:PowerTransformerEnd.ratedS  ?ratedsend2 }.

        FILTER (?hasvalue=true && ?hasratedsend2=true && ?end1!=?end2 && ?value!=?ratedsend2) .        
			}
      HAVING(?ends=2)
      """ .       
      
      
equ:PowerTransformerEnd.ratedU-valueRange
        a               sh:PropertyShape ;
        sh:sparql       equ:PowerTransformerEnd.ratedU-valueRangeSparql ;
        sh:path         rdf:type ;
        sh:description  "A high voltage side, as given by TransformerEnd.endNumber, shall have a ratedU that is greater than or equal to ratedU for the lower voltage sides. The attribute shall be a positive value." ;
        sh:name         "C:301:EQ:PowerTransformerEnd.ratedU:valueRange" ;
        sh:group        equ:EQ301UML ;
        sh:order        81 ;
        sh:severity     sh:Violation .
        
    
equ:PowerTransformerEnd.ratedU-valueRangeSparql
		a         sh:SPARQLConstraint ;  
		sh:message "The PowerTransformerEnd.ratedU does not fuifil one of the following: 1) it is not a positive value; 2) the value of the high voltage side shall be greater than or equal to ratedU for the lower voltage sides." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value ?ends
			WHERE {
        {
        SELECT $this (COUNT(?typeend) AS ?ends)
        WHERE {
        $this ^cim:PowerTransformerEnd.PowerTransformer/rdf:type ?typeend .
        }
        GROUP BY $this ?typeend
        }
        
        ?end1 cim:PowerTransformerEnd.PowerTransformer $this .
        ?end1 cim:TransformerEnd.endNumber  1.
        ?end1 cim:PowerTransformerEnd.ratedU  ?value .
        ?end2 cim:PowerTransformerEnd.PowerTransformer $this  .
        ?end2 cim:TransformerEnd.endNumber  2 .
        ?end2 cim:PowerTransformerEnd.ratedU  ?rateduend2 .
        #BIND(EXISTS{$this cim:PowerTransformerEnd.PowerTransformer/cim:TransformerEnd.endNumber  3} AS ?isthreew).
        #?end3 cim:PowerTransformerEnd.PowerTransformer $this .
        #?end3 cim:TransformerEnd.endNumber  3 .
        #?end3 cim:PowerTransformerEnd.ratedU  ?rateduend3 .
        OPTIONAL {?end3 cim:PowerTransformerEnd.PowerTransformer $this } .
        OPTIONAL {?end3 cim:TransformerEnd.endNumber  3 }.
        OPTIONAL {?end3 cim:PowerTransformerEnd.ratedU  ?rateduend3 }.

        FILTER (((?value<?rateduend2 || ?value<=0 || ?rateduend2<=0) && ?ends=2 && ?end1!=?end2 && ?end3=?end1) || (?ends=3 && ?end1!=?end2 && ?end1!=?end3 && ?end2!=?end3 && (?value<?rateduend2 || ?rateduend2<?rateduend3 || ?value<=0 || ?rateduend2<=0 || ?rateduend3<=0))) .        
			}

      """ . 
           
      
      
equ:RegulatingControl-terminalConnectivityNode
        a               sh:PropertyShape ;
        sh:sparql       equ:RegulatingControl-terminalConnectivityNodeSparql ;
        sh:description  "The specified terminal shall be associated with the connectivity node of the controlled point.  The most specific subtype of RegulatingControl shall be used in case such equipment participate in the control, e.g. TapChangerControl for tap changers." ;
        sh:name         "C:301:EQ:RegulatingControl:terminalConnectivityNode" ;
        sh:group        equ:EQ301UML ;
        sh:path         cim:RegulatingControl.Terminal ;
        sh:order        84 ;
        sh:severity     sh:Violation .
        
    
equ:RegulatingControl-terminalConnectivityNodeSparql
		a         sh:SPARQLConstraint ;  
		sh:message "The Terminal referenced by the RegulatingControl is not associated with a ConnectivityNode."  ;
		sh:prefixes cim: ;
		sh:select """
	    SELECT $this ?value 
      WHERE {
        $this $PATH ?value .
        BIND(EXISTS{?value cim:Terminal.ConnectivityNode ?cn} AS ?hascn).
        #OPTIONAL {?value cim:Terminal.ConnectivityNode ?cn }.
        FILTER (?hascn=false) .
        } """ .      
      
equ:ACDCConverter
        a               sh:NodeShape ;
        sh:property     equ:ACDCConverter.DCTerminals-numberOfTerminals, equ:ACDCConverter.PccTerminal-valueType ;
        sh:targetClass  cim:VsConverter, cim:CsConverter .


equ:ACDCConverter.DCTerminals-numberOfTerminals
        a               sh:PropertyShape ;
        sh:class        cim:ACDCConverterDCTerminal ;
        sh:description  "A converter has two DC converter terminals." ;
        sh:message      "The converter does not have two terminals, i.e. two instances of ACDCConverterDCTerminal." ;
        sh:name         "C:301:EQ:ACDCConverter.DCTerminals:numberOfTerminals" ;
        sh:minCount     2 ;
        sh:maxCount     2 ;
        sh:order        0 ;
        sh:group        equ:EQ301UMLvarious ;
        sh:path         [sh:inversePath  cim:ACDCConverterDCTerminal.DCConductingEquipment] ;
        sh:severity     sh:Violation .
              
equ:EQ301UMLvarious
        a           sh:PropertyGroup ;
        rdfs:label  "IEC61970-301-EQvarious" ;
        sh:order    0 .

equ:ACDCConverter.PccTerminal-valueType
        a               sh:PropertyShape ;
        sh:or           ( [sh:class        cim:PowerTransformer ;] [sh:class        cim:Switch ;] [sh:class        cim:Disconnector ;] [sh:class        cim:Fuse ;] [sh:class        cim:GroundDisconnector ;] [sh:class        cim:Jumper ;] [sh:class        cim:Breaker ;] [sh:class        cim:DisconnectingCircuitBreaker ;] [sh:class        cim:LoadBreakSwitch ;] );
        sh:description  "It is typically the terminal on the power transformer (or switch) closest to the AC network." ;
        sh:message      "The terminal is not a terminal of a PowerTransformer or a Switch." ;
        sh:name         "C:301:EQ:ACDCConverter.PccTerminal:valueType" ;
        sh:path         ( cim:ACDCConverter.PccTerminal cim:Terminal.ConductingEquipment ) ;
        sh:order        1 ;
        sh:group        equ:EQ301UMLvarious ;
        sh:severity     sh:Warning .
       
equ:BusbarSection
        a               sh:NodeShape ;
        sh:property     equ:Terminal.ConductingEquipmentBusbarSection-valueType ;
        sh:targetClass  cim:BusbarSection .


equ:Terminal.ConductingEquipmentBusbarSection-valueType
        a               sh:PropertyShape ;
        sh:class        cim:Terminal ;
        sh:description  "A bus bar section may have many physical terminals but for analysis is modelled with exactly one logical terminal." ;
        sh:message      "The BusbarSection has more than one  terminal." ;
        sh:name         "C:301:EQ:BusbarSection:numberOfTerminals" ;
        sh:minCount     1 ;
        sh:maxCount     1 ;
        sh:order        2 ;
        sh:group        equ:EQ301UMLvarious ;
        sh:path         [sh:inversePath  cim:Terminal.ConductingEquipment] ;
        sh:severity     sh:Violation .
               
equ:ConductingEquipment.BaseVoltage
        a               sh:NodeShape ;
        sh:property     equ:ConductingEquipment.BaseVoltage-usage ;
        sh:targetClass  cim:CsConverter, cim:VsConverter, cim:Clamp, cim:ACLineSegment, cim:BusbarSection, cim:Junction, cim:GroundingImpedance, cim:PetersenCoil, cim:EnergySource, cim:EnergyConsumer, cim:ConformLoad, cim:NonConformLoad, cim:StationSupply, cim:ExternalNetworkInjection, cim:LinearShuntCompensator, cim:NonlinearShuntCompensator, cim:StaticVarCompensator,  cim:SynchronousMachine, cim:AsynchronousMachine, cim:PowerElectronicsConnection,   cim:EquivalentInjection, cim:EquivalentShunt, cim:EquivalentBranch, cim:Ground, cim:PowerTransformer, cim:SeriesCompensator, cim:Switch, cim:Disconnector, cim:Fuse, cim:GroundDisconnector, cim:Jumper, cim:Breaker, cim:LoadBreakSwitch, cim:DisconnectingCircuitBreaker, cim:Cut .


equ:ConductingEquipment.BaseVoltage-usage
        a               sh:PropertyShape ;
        sh:sparql       equ:ConductingEquipment.BaseVoltage-usageSparql ;
        sh:description  "Use only when there is no voltage level container used and only one base voltage applies.  For example, not used for transformers." ;
        sh:name         "C:301:EQ:ConductingEquipment.BaseVoltage:usage" ;
        sh:path         cim:Equipment.EquipmentContainer ;
        sh:order        3 ;
        sh:group        equ:EQ301UMLvarious ;
        sh:severity     sh:Violation .
        
    
equ:ConductingEquipment.BaseVoltage-usageSparql
		a         sh:SPARQLConstraint ;  
		sh:message "The association ConductingEquipment.BaseVoltage is defined for a ConductingEquipment contained in a VoltageLevel." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT $this ?value
			WHERE {
        $this $PATH ?value .
        #?value rdf:type ?type .
        ?value rdf:type cim:VoltageLevel .
        $this rdf:type ?condeqtype .
        BIND(EXISTS{$this cim:ConductingEquipment.BaseVoltage ?basevoltage} AS ?hasbv).
        #$this cim:ConductingEquipment.BaseVoltage ?basevoltage .
        #FILTER (!isLiteral(?basevoltage) && ?type=cim:VoltageLevel && ?condeqtype!=cim:ACLineSegment && ?condeqtype!=cim:EquivalentBranch && ?condeqtype!=cim:SeriesCompensator) .
        FILTER (?hasbv=true && ?condeqtype!=cim:ACLineSegment && ?condeqtype!=cim:EquivalentBranch && ?condeqtype!=cim:SeriesCompensator && ?condeqtype!=cim:Equipment) .        
			}""" .

equ:NonlinearShuntCompensator  a  sh:NodeShape ;
        sh:property     equ:ShuntCompensator.maximumSections-numberOfInstances ;
        sh:targetClass  cim:NonlinearShuntCompensator .

equ:ShuntCompensator.maximumSections-numberOfInstances
        a               sh:PropertyShape ;
        sh:sparql       equ:ShuntCompensator.maximumSections-numberOfInstancesSparql ;
        sh:description  "The number of NonlinearShuntCompenstorPoint instances associated with a NonlinearShuntCompensator shall be equal to ShuntCompensator.maximumSections. " ;
        sh:name         "C:301:EQ:NonlinearShuntCompensatorPoint:numberOfInstances" ;
        sh:path         cim:ShuntCompensator.maximumSections ;
        sh:group        equ:EQ301UMLvarious ;
        sh:order        4 ;
        sh:severity     sh:Violation .
        
    
equ:ShuntCompensator.maximumSections-numberOfInstancesSparql
		a         sh:SPARQLConstraint ;  
		sh:message "The number of NonlinearShuntCompenstorPoint instances associated with a NonlinearShuntCompensator does not equal to ShuntCompensator.maximumSections." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value ?typesall
			WHERE {
        {
        SELECT $this (COUNT(?typeall) AS ?typesall)
        WHERE {
            $this ^cim:NonlinearShuntCompensatorPoint.NonlinearShuntCompensator/rdf:type ?typeall .
            #?nscpointsall cim:NonlinearShuntCompensatorPoint.NonlinearShuntCompensator  $this .
            #?nscpointsall rdf:type ?typeall .
          }
        GROUP BY $this ?typesall
        }
        $this $PATH ?value .  
        FILTER (?value!=?typesall) .
			}""" .        
      
#equ:Clamp
#        a               sh:NodeShape ;
#        sh:property     equ:Clamp-numberOfTerminals ;
#        sh:targetClass  cim:Clamp .

equ:Clamp-numberOfTerminals
        #a               sh:PropertyShape ;
        a               sh:NodeShape ;
        sh:description  "A Clamp is ConductingEquipment and has one Terminal with an associated ConnectivityNode." ;
        sh:message      "Either the Clamp does not have exactly one Terminal or the Terminal is not associated with a ConnectivityNode." ;
        sh:name         "C:452:EQ:Clamp:numberOfTerminals" ;
        sh:and (
        [
        sh:minCount     1 ;
        sh:maxCount     1 ;
        sh:path         [sh:inversePath  cim:Terminal.ConductingEquipment] ;
        ]
        [
        sh:path       ([sh:inversePath  cim:Terminal.ConductingEquipment] cim:Terminal.ConnectivityNode);
        sh:minCount     1 ;
        sh:maxCount     1 ;
        ]
        );
        sh:order        5 ;
        sh:group        equ:EQ301UMLvarious ;
        sh:severity     sh:Violation ; 
        sh:targetClass  cim:Clamp .        

equ:ConductingEquipment-twoTerminalsShape
        a               sh:NodeShape ;
        #sh:property     equ:ConductingEquipment-twoTerminals , equ:Terminal.phases-consistencyEquipment;
        sh:property     equ:Terminal.phases-consistencyEquipment;
        sh:targetClass  cim:ACLineSegment, cim:DCLineSegment , cim:DCSeriesDevice , cim:DCSwitch , cim:DCDisconnector , cim:DCBreaker , cim:DCChopper , cim:Switch, cim:Disconnector, cim:Fuse, cim:GroundDisconnector, cim:Jumper, cim:Breaker, cim:LoadBreakSwitch, cim:DisconnectingCircuitBreaker, cim:Cut, cim:SeriesCompensator,cim:EquivalentBranch.

equ:ConductingEquipment-twoTerminals
        #a               sh:PropertyShape ;
        a               sh:NodeShape ;
        sh:description  "The following ConductingEquipment classes have two terminals: ACLineSegment, DCLineSegment, DCSeriesDevice, DCSwitch (and its specializations), DCChopper, Switch and all its specializations (including Jumper, Fuse, Breaker, Disconnector, LoadBreakSwitch, and Cut), SeriesCompensator, and EquivalentBranch. The PowerTransformer class typically has two terminals, but may also have one or more terminals. For example a zig-zag connected grounding transformer may have one terminal. Three terminal transformers are commonly used in transmission systems and in special cases transformers may have four, five, or more terminals. " ;
        sh:message      "The ConductingEquipment does not have the required number of Terminal-s." ;
        sh:name         "C:301:EQ:ConductingEquipment:twoTerminals" ;
        sh:or  (
        [
        sh:minCount     2 ;
        sh:maxCount     2 ;
        sh:path         [sh:inversePath  cim:Terminal.ConductingEquipment] ;
        ]
        [
        sh:minCount     2 ;
        sh:maxCount     2 ;
        sh:path         [sh:inversePath  cim:DCTerminal.DCConductingEquipment] ;
        ]
        );
        sh:order        6 ;
        sh:group        equ:EQ301UMLvarious ;
        sh:severity     sh:Violation ;
        sh:targetClass  cim:ACLineSegment, cim:DCLineSegment , cim:DCSeriesDevice , cim:DCSwitch , cim:DCDisconnector , cim:DCBreaker , cim:DCChopper , cim:Switch, cim:Disconnector, cim:Fuse, cim:GroundDisconnector, cim:Jumper, cim:Breaker, cim:LoadBreakSwitch, cim:DisconnectingCircuitBreaker, cim:Cut, cim:SeriesCompensator,cim:EquivalentBranch.
        
#equ:ConductingEquipment-oneTerminalShape
#        a               sh:NodeShape ;
#        sh:property     equ:ConductingEquipment-oneTerminal ;
#        sh:targetClass  cim:DCGround , cim:DCBusbar , cim:DCShunt , cim:Ground , cim:EnergySource , cim:EnergyConsumer, cim:ConformLoad, cim:NonConformLoad, cim:StationSupply, cim:PowerElectronicsConnection , cim:ExternalNetworkInjection, cim:LinearShuntCompensator, cim:NonlinearShuntCompensator , cim:StaticVarCompensator,cim:SynchronousMachine, cim:AsynchronousMachine,cim:EquivalentInjection, cim:EquivalentShunt , cim:Junction.

equ:ConductingEquipment-oneTerminal
        #a               sh:PropertyShape ;
        a               sh:NodeShape ;
        sh:description  "All other ConductingEquipment leaf classes (notably also including Clamp and BusbarSection) and DCConductingEquipment have a single terminal." ;
        sh:name         "C:301:EQ:ConductingEquipment:oneTerminal" ;
        sh:message      "The ConductingEquipment does not have the required number of Terminal-s." ;
        sh:or  (
        [
        sh:minCount     1 ;
        sh:maxCount     1 ;
        sh:path         [sh:inversePath  cim:Terminal.ConductingEquipment] ;
        ]
        [
        sh:minCount     1 ;
        sh:maxCount     1 ;
        sh:path         [sh:inversePath  cim:DCTerminal.DCConductingEquipment] ;
        ]
        );
        sh:order        7 ;
        sh:group        equ:EQ301UMLvarious ;
        sh:severity     sh:Violation ;  
        sh:targetClass  cim:DCGround , cim:DCBusbar , cim:DCShunt , cim:Ground , cim:EnergySource , cim:EnergyConsumer, cim:ConformLoad, cim:NonConformLoad, cim:StationSupply, cim:PowerElectronicsConnection , cim:ExternalNetworkInjection, cim:LinearShuntCompensator, cim:NonlinearShuntCompensator , cim:StaticVarCompensator,cim:SynchronousMachine, cim:AsynchronousMachine,cim:EquivalentInjection, cim:EquivalentShunt , cim:Junction.        

equ:EarthFaultCompensator
        a               sh:NodeShape ;
        sh:property     equ:EarthFaultCompensator-numberOfTerminals ;
        sh:targetClass  cim:GroundingImpedance, cim:PetersenCoil.

equ:EarthFaultCompensator-numberOfTerminals
        a               sh:PropertyShape ;
        sh:description  "The EarthFaultCompensator can have either one or two terminals modelled. If the second terminal of an EarthFaultCompensator is omitted, it is assumed the terminal solidly connects to ground. If there is some kind of topology or local earth resistivity that is important to model on the ground side of the device, then a second terminal is added." ;
        sh:name         "C:301:EQ:EarthFaultCompensator:numberOfTerminals" ;
        sh:message      "The EarthFaultCompensator does not have the required number of Terminal-s." ;
        sh:minCount     1 ;
        sh:maxCount     2 ;
        sh:path         [sh:inversePath  cim:Terminal.ConductingEquipment] ;
        sh:order        8 ;
        sh:group        equ:EQ301UMLvarious ;
        sh:severity     sh:Violation .        

equ:Terminal
        a               sh:NodeShape ;
        sh:property     equ:Terminal.phases-phaseCodeN ;
        sh:targetClass  cim:GroundingImpedance, cim:PetersenCoil , cim:GroundDisconnector , cim:Ground.
                
equ:Terminal.phases-phaseCodeN
        a               sh:PropertyShape ;
        sh:description  "If the attribute is missing, three phases (ABC) shall be assumed, except for terminals of grounding classes (specializations of EarthFaultCompensator, GroundDisconnector, and Ground) which will be assumed to be N. Therefore, phase code ABCN is explicitly declared when needed, e.g. for star point grounding equipment." ;
        sh:name         "C:301:EQ:Terminal.phases:phaseCode" ;
        sh:message      "Terminal.phases differs from PhaseCode.N for a grounding related class." ;
        sh:in           (cim:PhaseCode.N );
        sh:path         ([sh:inversePath  cim:Terminal.ConductingEquipment] cim:Terminal.phases);
        sh:order        9 ;
        sh:group        equ:EQ301UMLvarious ;
        sh:severity     sh:Violation .                 
                
                
equ:Terminal.phases
        a               sh:NodeShape ;
        sh:property     equ:Terminal.phases-consistencyConnectivityNode ;
        sh:targetClass  cim:ConnectivityNode .

equ:Terminal.phases-consistencyConnectivityNode
        a               sh:PropertyShape ;
        sh:sparql       equ:Terminal.phases-consistencyConnectivityNodeSparql ;
        sh:path         rdf:type ;
        sh:description  "The phase code on terminals connecting same ConnectivityNode or same TopologicalNode as well as for equipment between two terminals shall be consistent." ;
        sh:name         "C:301:EQ:Terminal.phases:consistencyConnectivityNode" ;
        sh:order        10 ;
        sh:group        equ:EQ301UMLvarious ;
        sh:severity     sh:Violation .                 


#equ:Terminal.phases-consistencyConnectivityNodeSparql
#		a         sh:SPARQLConstraint ;  
#		sh:message      "The phase codes for the connected terminals are not consistent. " ;
#		sh:prefixes cim: ;
#		sh:select """
#			SELECT $this 
#			WHERE {
#
#          {
#          SELECT $this (COUNT(?tphase3) AS ?tphasecountn) 
#          WHERE {
#                  #$this ^cim:Terminal.ConnectivityNode ?terms3 .
#                  #?terms3 rdf:type ?typeterm3 .
#                  ?terms cim:Terminal.phases ?tphase3  .
#                  FILTER(?tphase3=cim:PhaseCode.N) .
#                }
#                GROUP BY $this ?tphase3 
#          }
#
#          
#            {
#          SELECT $this (COUNT(?tphase2) AS ?tphasecountabc) 
#          WHERE {
#                  #$this ^cim:Terminal.ConnectivityNode ?terms2 .
#                  #?terms2 rdf:type ?typeterm2 .
#                  ?terms cim:Terminal.phases ?tphase2  .
#                  FILTER(?tphase2=cim:PhaseCode.ABC) .
#                }
#                GROUP BY $this ?tphase2 
#          }
#          
#          {
#          SELECT $this (COUNT(?tphase) AS ?tphasecountabcn) 
#          WHERE {
#                  #$this ^cim:Terminal.ConnectivityNode ?terms1 .
#                  #?terms1 rdf:type ?typeterm1 .
#                  ?terms cim:Terminal.phases ?tphase  .
#                  FILTER(?tphase=cim:PhaseCode.ABCN) .
#                }
#                GROUP BY $this ?tphase  
#          }
#          
#          
#          
#
#          {
#          SELECT $this ?termscountall ?terms
#          WHERE {  
#              {
#                SELECT $this (COUNT(?typeterm) AS ?termscountall)  ?terms
#                WHERE {
#                  $this ^cim:Terminal.ConnectivityNode ?terms .
#                  ?terms rdf:type ?typeterm .
#           
#
#                }
#                GROUP BY $this ?typeterm  ?terms
#                HAVING(?termscountall>1)
#              }
#           }
#          }           
#   
#    
#      
#      
#      
#      
#        
#        #OPTIONAL {?value cim:Terminal.phases ?tphase } .
#        #?value cim:Terminal.phases ?value1  .
#        #$this ^cim:Terminal.ConnectivityNode ?term2  .
#        #OPTIONAL {?term2 cim:Terminal.phases ?value2 } .
#        
#        #FILTER (?value!=?term2 && (( bound(?value2) && (?value1=cim:PhaseCode.ABCN || ?value1=cim:PhaseCode.N) && (?value2!=cim:PhaseCode.ABCN && ?value2!=cim:PhaseCode.N)) ||
#        #(bound(?value2) && (?value1=cim:PhaseCode.ABC) && (?value2!=cim:PhaseCode.ABC)) ||
#        #(!bound(?value2) && (?value1=cim:PhaseCode.ABCN || ?value1=cim:PhaseCode.N)))
#        #) .
#        
#        #FILTER (?value!=?term2 && (( bound(?value2) && (?value1=cim:PhaseCode.ABCN || ?value1=cim:PhaseCode.N) && (?value2!=cim:PhaseCode.ABCN && ?value2!=cim:PhaseCode.N)) ||
#        #(bound(?value2) && (?value1=cim:PhaseCode.ABC) && (?value2!=cim:PhaseCode.ABC)) ||
#        #(!bound(?value2) && (?value1=cim:PhaseCode.ABCN || ?value1=cim:PhaseCode.N)))
#        #) .
#			}
#      
#      """ . 
   
equ:Terminal.phases-consistencyConnectivityNodeSparql
		a         sh:SPARQLConstraint ;  
		sh:message      "The phase codes for the connected terminals are not consistent. Terminal 1 code:{?value1} Terminal 2 code: {?value2}." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value2 ?terms ?value1 ?value
			WHERE {
        {
        SELECT $this (COUNT(?typeterm) AS ?terms) ?value
        WHERE {
        $this ^cim:Terminal.ConnectivityNode ?value .
        ?value rdf:type ?typeterm .
        #?term cim:Terminal.ConnectivityNode $this .
        #?term rdf:type ?typeterm .
        }
        GROUP BY $this ?typeterm ?value
        HAVING (?terms>1)
        }
      
        #$this ^cim:Terminal.ConnectivityNode ?value  .
        $this ^cim:Terminal.ConnectivityNode ?term2  .
        ?value cim:Terminal.phases ?value1  .
        OPTIONAL {?term2 cim:Terminal.phases ?value2 } .
      
        #?value cim:Terminal.ConnectivityNode $this  .
        #?term1 cim:Terminal.phases ?value1  .
        #?term2 cim:Terminal.ConnectivityNode $this  .
        #?term2 cim:Terminal.phases ?value2.
        
        #BIND(EXISTS{?term1 cim:Terminal.phases ?v1} AS ?hasvalue1).
  
        
        #BIND(EXISTS{?term2 cim:Terminal.phases ?v2} AS ?hasvalue2).        
        #FILTER ((?terms>1 && ?hasvalue2=true && ?hasvalue1=true && ?term1!=?term2 && (?value1=cim:PhaseCode.ABCN || ?value1=cim:PhaseCode.N) && (?value2!=cim:PhaseCode.ABCN && ?value2!=cim:PhaseCode.N)) ||
        #(?terms>1 && ?hasvalue2=true && ?hasvalue1=true && ?term1!=?term2 && (?value1=cim:PhaseCode.ABC) && (?value2!=cim:PhaseCode.ABC)) ||
        #(?terms>1 && ?hasvalue1=true && ?hasvalue2=false && ?term1!=?term2 && (?value1=cim:PhaseCode.ABCN || ?value1=cim:PhaseCode.N))
        #) .
        FILTER ((?value!=?term2 && bound(?value2) && (?value1=cim:PhaseCode.ABCN || ?value1=cim:PhaseCode.N) && (?value2!=cim:PhaseCode.ABCN && ?value2!=cim:PhaseCode.N)) ||
        (?value!=?term2 && bound(?value2) && (?value1=cim:PhaseCode.ABC) && (?value2!=cim:PhaseCode.ABC)) ||
        (?value!=?term2 && !bound(?value2) && (?value1=cim:PhaseCode.ABCN || ?value1=cim:PhaseCode.N))
        ) .
			}""" .                   
                
                
equ:Terminal.phases-consistencyEquipment
        a               sh:PropertyShape ;
        sh:sparql       equ:Terminal.phases-consistencyEquipmentSparql ;
        sh:path         rdf:type ;
        sh:description  "The phase code on terminals connecting same ConnectivityNode or same TopologicalNode as well as for equipment between two terminals shall be consistent." ;
        sh:name         "C:301:EQ:Terminal.phases:consistencyEquipment" ;
        sh:order        11 ;
        sh:group        equ:EQ301UMLvarious ;
        sh:severity     sh:Violation .                 

   
equ:Terminal.phases-consistencyEquipmentSparql
		a         sh:SPARQLConstraint ;  
		sh:message      "The phase codes for terminals of 2-terminal equipment are not consistent. Terminal 1 code:{?value1} Terminal 2 code: {?value2}." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value2 ?value1
			WHERE {      
        $this ^cim:Terminal.ConductingEquipment ?term1  .
        ?term1 cim:ACDCTerminal.sequenceNumber 1 .
        $this ^cim:Terminal.ConductingEquipment ?term2  .
        ?term2 cim:ACDCTerminal.sequenceNumber 2 
        OPTIONAL {?term1 cim:Terminal.phases ?value1 } .
        OPTIONAL {?term2 cim:Terminal.phases ?value2 } . 
        FILTER ((bound(?value1) && bound(?value2) && ?term1!=?term2 && (?value1=cim:PhaseCode.ABCN || ?value1=cim:PhaseCode.N) && (?value2!=cim:PhaseCode.ABCN && ?value2!=cim:PhaseCode.N)) ||
        (bound(?value1) && bound(?value2) && ?term1!=?term2 && (?value1=cim:PhaseCode.ABC) && (?value2!=cim:PhaseCode.ABC)) ||
        (bound(?value1) && !bound(?value2) && ?term1!=?term2 && (?value1=cim:PhaseCode.ABCN || ?value1=cim:PhaseCode.N))
        ) .
			}""" .                   
               
                
#equ:CurveData
#        a               sh:NodeShape ;
#        sh:property     equ:ReactiveCapabilityCurve-curveYvalues ;
#        sh:targetClass  cim:CurveData .
        
equ:ReactiveCapabilityCurve-curveYvalues
        #a               sh:PropertyShape ;
        a               sh:NodeShape ;
        sh:description  "For each active power value there is a corresponding high and low reactive power limit  value. Typically there will be a separate curve for each coolant condition, such as hydrogen pressure. " ;
        sh:name         "C:301:EQ:ReactiveCapabilityCurve:yvalues" ;
        sh:group        equ:EQ301UMLvarious ;
        sh:message      "CurveData associated with a ReactiveCapabilityCurve does not have both .y1value and .y2value defined." ;
        sh:and (
        [
        sh:path         cim:CurveData.y1value ;
        sh:minCount     1;
        sh:maxCount     1;
        ]
        [
        sh:path         cim:CurveData.y2value ;
        sh:minCount     1;
        sh:maxCount     1;
        ]
        );
        sh:order        12 ;
        sh:severity     sh:Violation ;  
        sh:targetClass  cim:CurveData .        
                
                
                
equ:VoltageLimit
        a               sh:NodeShape ;
        sh:property     equ:LimitKind.patl-allowedType ;
        sh:targetClass  cim:VoltageLimit .  

equ:LimitKind.patl-allowedType
        a               sh:PropertyShape ;
        sh:sparql       equ:LimitKind.patl-allowedTypeSparql ;
        sh:path         rdf:type ;
        sh:description  "The Permanent Admissible Transmission Loading (PATL) is the loading in amperes, MVA or MW that can be accepted by a network branch for an unlimited duration without any risk for the material." ;
        sh:name         "C:301:EQ:LimitKind.patl:allowedType" ;
        sh:order        13 ;
        sh:group        equ:EQ301UMLvarious ;
        sh:severity     sh:Violation .                 

   
equ:LimitKind.patl-allowedTypeSparql
		a         sh:SPARQLConstraint ;  
		sh:message      "PATL type is provided for VoltageLimit." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value
			WHERE {      
        $this cim:OperationalLimit.OperationalLimitType/eu:OperationalLimitType.kind ?value.
        #?type eu:OperationalLimitType.kind ?value .

        FILTER (?value=eu:LimitKind.patl) .
			}""" .          
      

equ:LimitKind
        a               sh:NodeShape ;
        sh:property     equ:LimitKind.patl-numberOfLimitType , equ:LimitKind.tc-duration; 
        sh:targetClass  cim:OperationalLimitType  . 

equ:LimitKind.patl-numberOfLimitType
        a               sh:PropertyShape ;
        sh:sparql       equ:LimitKind.patl-numberOfLimitTypeSparql ;
        sh:path         rdf:type ;
        sh:description  "The OperationnalLimitType.isInfiniteDuration is set to true. There shall be only one OperationalLimitType of kind PATL per OperationalLimitSet if the PATL is ApparentPowerLimit, ActivePowerLimit, or CurrentLimit for a given Terminal or Equipment." ;
        sh:name         "C:301:EQ:LimitKind.patl:numberOfLimitType" ;
        sh:order        14 ;
        sh:group        equ:EQ301UMLvarious ;
        sh:severity     sh:Violation .                 

equ:LimitKind.patl-numberOfLimitTypeSparql
		a         sh:SPARQLConstraint ;  
		sh:message      "Either there is more than one PATL defined for a given OperationalLimitSet or OperationnalLimitType.isInfiniteDuration is not set to true for PATL type. The OperationnalLimitType.isInfiniteDuration is: {?infdur}." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this (COUNT(?ol) AS ?patls) ?infdur ?value
			WHERE {      
        $this cim:OperationalLimitType.isInfiniteDuration ?infdur .
        $this eu:OperationalLimitType.kind eu:LimitKind.patl .
        $this ^cim:OperationalLimit.OperationalLimitType ?ol .
        ?ol  rdf:type ?typeol .
        ?ol cim:OperationalLimit.OperationalLimitSet ?value .
        FILTER (?typeol IN (cim:ApparentPowerLimit , cim:ActivePowerLimit , cim:CurrentLimit)) .
			}
      GROUP BY $this ?value ?infdur 
      HAVING (?patls>1 || ?infdur=false)
      """ .    

equ:LimitKind.tc-duration
        a               sh:PropertyShape ;
        sh:sparql       equ:LimitKind.tc-durationSparql ;
        sh:path         rdf:type ;
        sh:description  "The duration is always zero if the OperationalLimitType.acceptableDuration is exchanged. Only one limit value exists for the TC type." ;
        sh:name         "C:301:EQ:LimitKind.tc:duration" ;
        sh:order        15 ;
        sh:group        equ:EQ301UMLvarious ;
        sh:severity     sh:Violation .                 


equ:LimitKind.tc-durationSparql
		a         sh:SPARQLConstraint ;  
		sh:message      "Either OperationalLimitType.acceptableDuration is present and different than 0 or there is more than one limit with TC type. The OperationnalLimitType.acceptableDuration is: {?adur}." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this (COUNT(?ol) AS ?tcs) ?adur ?value
			WHERE {      
        $this eu:OperationalLimitType.kind eu:LimitKind.tc .
        $this ^cim:OperationalLimit.OperationalLimitType ?ol .
        ?ol cim:OperationalLimit.OperationalLimitSet ?value .
        OPTIONAL {$this cim:OperationalLimitType.acceptableDuration ?adur }.
			}
      GROUP BY $this ?value ?adur ?value
      HAVING (?tcs>1 || (bound(?adur) && ?adur!=0))
      """ . 

      
equ:TapChanger
        a               sh:NodeShape ;
        sh:property     equ:TapChanger.ltcFlag-tapChangerControl , equ:DCConverterUnit-tapChangerControl;
        sh:targetClass  cim:RatioTapChanger , cim:PhaseTapChangerTabular , cim:PhaseTapChangerSymmetrical , cim:PhaseTapChangerAsymmetrical , cim:PhaseTapChangerLinear  .  

equ:TapChanger.ltcFlag-tapChangerControl
        a               sh:PropertyShape ;
        sh:sparql       equ:TapChanger.ltcFlag-tapChangerControlSparql ;
        sh:description  "When TapChanger.ltcFlag=false and TapChanger.TapChangerControl is present an artificial tap changer can be used to simulate control behaviour in power flow." ;
        sh:name         "C:301:EQ:TapChanger.ltcFlag:tapChangerControl" ;
        sh:path         cim:TapChanger.ltcFlag;
        sh:order        16 ;
        sh:group        equ:EQ301UMLvarious ;
        sh:severity     sh:Violation .                 

   
equ:TapChanger.ltcFlag-tapChangerControlSparql
		a         sh:SPARQLConstraint ;  
		sh:message      "An artificial tap changer is used to simulate control behaviour in power flow." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value  
			WHERE {      
        $this $PATH ?value .
        BIND(EXISTS{$this cim:TapChanger.TapChangerControl ?tcc } AS ?hastcc).
        
        FILTER (?hastcc=true && ?value=false) .
			}""" .        
      
equ:DCConverterUnit-tapChangerControl
        a               sh:PropertyShape ;
        sh:sparql       equ:DCConverterUnit-tapChangerControlSparql ;
        sh:path         rdf:type ;
        sh:description  "No TapChangerControl is used for the converter transformer, the control function is described in the ACDCConverter-s." ;
        sh:name         "C:301:EQ:DCConverterUnit:tapChangerControl" ;
        sh:order        17 ;
        sh:group        equ:EQ301UMLvarious ;
        sh:severity     sh:Violation .                 

   
equ:DCConverterUnit-tapChangerControlSparql
		a         sh:SPARQLConstraint ;  
		sh:message      "TapChangerControl is association to a transformer contained in DCConverterUnit." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value  
			WHERE {      
        OPTIONAL {$this cim:TapChanger.TapChangerControl ?value }.
        OPTIONAL {$this cim:RatioTapChanger.TransformerEnd/cim:PowerTransformerEnd.PowerTransformer/cim:Equipment.EquipmentContainer/rdf:type ?typeratiotc }.
        OPTIONAL {$this cim:PhaseTapChanger.TransformerEnd/cim:PowerTransformerEnd.PowerTransformer/cim:Equipment.EquipmentContainer/rdf:type ?typephasetc }.
        
        FILTER (bound(?value) && ((bound(?typeratiotc) && ?typeratiotc=cim:DCConverterUnit) || (bound(?typephasetc) && ?typephasetc=cim:DCConverterUnit))) .
			}""" .         
    

equ:CsConverter
        a               sh:NodeShape ;
        sh:property     equ:DCConverterUnit-cscPowerTransformer ;
        sh:targetClass  cim:CsConverter  .  

equ:DCConverterUnit-cscPowerTransformer
        a               sh:PropertyShape ;
        sh:sparql       equ:DCConverterUnit-cscPowerTransformerSparql ;
        sh:path         rdf:type ;
        sh:description  "For a CSC HVDC, the transformer shall be modelled explicitly." ;
        sh:name         "C:301:EQ:DCConverterUnit:cscPowerTransformer" ;
        sh:order        18 ;
        sh:group        equ:EQ301UMLvarious ;
        sh:severity     sh:Violation .                 

   
equ:DCConverterUnit-cscPowerTransformerSparql
		a         sh:SPARQLConstraint ;  
		sh:message      "A DCConverterUnit that contains CsConverter does not contain a PowerTransformer." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value  
			WHERE {      
        $this cim:Equipment.EquipmentContainer ?value .
        
        FILTER NOT EXISTS {
        ?value ^cim:Equipment.EquipmentContainer/rdf:type cim:PowerTransformer 
        }.
			}""" .         
                  
      
equ:PowerTransformerEnd
        a               sh:NodeShape ;
        sh:property     equ:PowerTransformerEnd-terminalConsistency ;
        sh:targetClass  cim:PowerTransformerEnd  .  

equ:PowerTransformerEnd-terminalConsistency
        a               sh:PropertyShape ;
        sh:sparql       equ:PowerTransformerEnd-terminalConsistencySparql ;
        sh:path         rdf:type ;
        sh:description  "In all cases a PowerTransformer models a group of physical devices acting together to transform power among terminals and in one physical location." ;
        sh:name         "C:301:EQ:PowerTransformerEnd:terminalConsistency" ;
        sh:order        19 ;
        sh:group        equ:EQ301UMLvarious ;
        sh:severity     sh:Violation .                 

   
equ:PowerTransformerEnd-terminalConsistencySparql
		a         sh:SPARQLConstraint ;  
		sh:message      "The Terminal referenced by TransformerEnd.Terminal points to a PowerTransformer which is different than the referenced element via PowerTransformerEnd.PowerTransformer." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this   
			WHERE {      
        $this cim:TransformerEnd.Terminal/cim:Terminal.ConductingEquipment ?endtermpt .
        $this cim:PowerTransformerEnd.PowerTransformer ?pendpt .
        
        FILTER (?endtermpt!=?pendpt) .
			}""" .       

equ:ShuntCompensator.nomU-nominalVoltageDifference
        a               sh:PropertyShape ;
        sh:sparql       equ:ShuntCompensator.nomU-nominalVoltageDifferenceSparql ;
        sh:path         rdf:type ;
        sh:description  "This should normally be within 10% of the voltage at which the capacitor is connected to the network." ;
        sh:name         "C:301:EQ:ShuntCompensator.nomU:nominalVoltageDifference" ;
        sh:order        20 ;
        sh:group        equ:EQ301UMLvarious ;
        sh:severity     sh:Warning .                 

   
equ:ShuntCompensator.nomU-nominalVoltageDifferenceSparql
		a         sh:SPARQLConstraint ;  
		sh:message      "The value differs with more than 10% of the nominal voltage abtained via the containment to VoltageLevel." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value   
			WHERE {      
        $this cim:ShuntCompensator.nomU ?value .
        $this cim:Equipment.EquipmentContainer/cim:VoltageLevel.BaseVoltage/cim:BaseVoltage.nominalVoltage ?nomv .
        
        FILTER (?value<0.9*?nomv && ?value>1.1*?nomv) .
			}""" .      
      
      
equ:ControlAreaGeneratingUnit.GeneratingUnit  a  sh:NodeShape ;
        sh:property     equ:ControlAreaGeneratingUnit.GeneratingUnit-instance ;
        sh:targetClass  cim:GeneratingUnit , cim:WindGeneratingUnit , cim:HydroGeneratingUnit , cim:NuclearGeneratingUnit , cim:SolarGeneratingUnit , cim:ThermalGeneratingUnit .
              
equ:ControlAreaGeneratingUnit.GeneratingUnit-instance
        a               sh:PropertyShape ;
        sh:sparql       equ:ControlAreaGeneratingUnit.GeneratingUnit-instanceSparql ;
        sh:path         rdf:type ;
        sh:description  "Note that a control area should include a GeneratingUnit only once." ;
        sh:name         "C:301:EQ:ControlAreaGeneratingUnit.GeneratingUnit:instance" ;
        sh:group        equ:EQ301UML ;
        sh:order        21 ;
        sh:severity     sh:Violation .
        
    
equ:ControlAreaGeneratingUnit.GeneratingUnit-instanceSparql
		a         sh:SPARQLConstraint ;  
		sh:message "The GeneratingUnit is assigned to more than once in a ControlArea." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this (COUNT(?ca) AS ?count)
			WHERE {
        $this ^cim:ControlAreaGeneratingUnit.GeneratingUnit/cim:ControlAreaGeneratingUnit.ControlArea ?ca.   
			}
      GROUP BY $this ?ca
      HAVING(?count>1)
      """ .        
      
equ:ACDCTerminal  a  sh:NodeShape ;
        sh:property     equ:ACDCTerminal.sequenceNumber-numbering ;
        sh:targetClass  cim:CsConverter, cim:VsConverter, cim:Clamp, cim:ACLineSegment, cim:BusbarSection, cim:Junction, cim:GroundingImpedance, cim:PetersenCoil, cim:EnergySource, cim:EnergyConsumer, cim:ConformLoad, cim:NonConformLoad, cim:StationSupply, cim:ExternalNetworkInjection, cim:LinearShuntCompensator, cim:NonlinearShuntCompensator, cim:StaticVarCompensator,  cim:SynchronousMachine, cim:AsynchronousMachine, cim:PowerElectronicsConnection,   cim:EquivalentInjection, cim:EquivalentShunt, cim:EquivalentBranch, cim:Ground, cim:PowerTransformer, cim:SeriesCompensator, cim:Switch, cim:Disconnector, cim:Fuse, cim:GroundDisconnector, cim:Jumper, cim:Breaker, cim:LoadBreakSwitch, cim:DisconnectingCircuitBreaker, cim:Cut, cim:DCBreaker , cim:DCLineSegment , cim:DCBusbar , cim:DCDisconnector , cim:DCSwitch , cim:DCSeriesDevice , cim:DCGround , cim:DCChopper , cim:DCShunt   .
              
equ:ACDCTerminal.sequenceNumber-numbering
        a               sh:PropertyShape ;
        sh:sparql       equ:ACDCTerminal.sequenceNumber-numberingSparql ;
        sh:path         rdf:type ;
        sh:description  "The sequence numbering starts with 1 and additional terminals should follow in increasing order. The first terminal is the starting point for a two terminal branch." ;
        sh:name         "C:301:EQ:ACDCTerminal.sequenceNumber:numbering" ;
        sh:group        equ:EQ301UML ;
        sh:order        22 ;
        sh:severity     sh:Violation .
        
    
equ:ACDCTerminal.sequenceNumber-numberingSparql
		a         sh:SPARQLConstraint ;  
		sh:message "There is no terminal with sequenceNumber=1 or the numbering is not unique." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this (COUNT(?sn) AS ?countsn) (COUNT(DISTINCT ?sn) AS ?countdsn) (MIN(?sn) AS ?minsn) (SUM(?sn) AS ?sumsn) (COUNT(?terms) AS ?countterms)
			WHERE {
        $this (^cim:Terminal.ConductingEquipment)|(^cim:DCTerminal.DCConductingEquipment) ?terms. 
        ?terms rdf:type ?type .
        ?terms cim:ACDCTerminal.sequenceNumber ?sn .
			}
      GROUP BY $this ?type
      HAVING(?countsn!=?countdsn || ?minsn!=1 || (?countterms=1 && ?sumsn!=1) || (?countterms=2 && (?sumsn/2)!=1.5) || (?countterms=3 && (?sumsn/3)!=2))
      """ .       
      
equ:PowerTransformer-twoWinding
        a               sh:NodeShape ;
        sh:property     equ:PowerTransformerEnd-secondWindingValues ;
        sh:target  
        [
              a sh:SPARQLTarget ;
              sh:prefixes cim: ;
              sh:select """
                SELECT DISTINCT ?this
                WHERE {
                  ?this rdf:type cim:PowerTransformer   .
                  FILTER NOT EXISTS {?this ^cim:PowerTransformerEnd.PowerTransformer/cim:TransformerEnd.endNumber 3}.
                }
                """ ;
        ] .      
           
equ:PowerTransformerEnd-secondWindingValues
        a               sh:PropertyShape ;
        sh:sparql       equ:PowerTransformerEnd-secondWindingValuesSparql ;
        sh:path         rdf:type ;
        sh:description  "1) for a two Terminal PowerTransformer the high voltage (TransformerEnd.endNumber=1) PowerTransformerEnd has non zero values on r, r0, x, and x0 while the low voltage (TransformerEnd.endNumber=2) PowerTransformerEnd has zero values for r, r0, x, and x0.  Parameters are always provided, even if the PowerTransformerEnds have the same rated voltage.  In this case, the parameters are provided at the PowerTransformerEnd which has TransformerEnd.endNumber equal to 1." ;
        sh:name         "C:301:EQ:PowerTransformerEnd:secondWindingValues" ;
        sh:group        equ:EQ301UML ;
        sh:order        23 ;
        sh:severity     sh:Violation .
        
    
equ:PowerTransformerEnd-secondWindingValuesSparql
		a         sh:SPARQLConstraint ;  
		sh:message "Non-zero values for the PowerTransformerEnd with TransformerEnd.endNumber=2 for a two Terminal PowerTransformer." ;
    #sh:message "Non-zero values for the PowerTransformerEnd with TransformerEnd.endNumber=2 or zero values for the PowerTransformerEnd with TransformerEnd.endNumber=1 for a two Terminal PowerTransformer." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value
			WHERE {
        ?value cim:PowerTransformerEnd.PowerTransformer $this .  
        ?value cim:TransformerEnd.endNumber 2 .
        #?value cim:TransformerEnd.endNumber ?endnumber .
        ?value cim:PowerTransformerEnd.r ?r .
        ?value cim:PowerTransformerEnd.r0 ?r0 .
        ?value cim:PowerTransformerEnd.x ?x .
        ?value cim:PowerTransformerEnd.x0 ?x0 .
        FILTER (!(?r=0 && ?r0=0 && ?x=0 && ?x0=0)).
        #FILTER ((!(?r=0 && ?r0=0 && ?x=0 && ?x0=0) && ?endnumber=2) || (!(?r!=0 && ?r0!=0 && ?x!=0 && ?x0!=0) && ?endnumber=1)).
        #FILTER (?r!=0 || ?r0!=0 || ?x!=0 || ?x0!=0).
			} """ .       
      
            
equ:TransformerEnd.endNumber-unique
        a               sh:PropertyShape ;
        sh:sparql       equ:TransformerEnd.endNumber-uniqueSparql ;
        sh:path         rdf:type ;
        sh:description  "Highest voltage winding should be 1.  Each end within a power transformer should have a unique subsequent end number." ;
        sh:name         "C:301:EQ:TransformerEnd.endNumber:unique" ;
        sh:group        equ:EQ301UML ;
        sh:order        24 ;
        sh:severity     sh:Violation .
        
    
equ:TransformerEnd.endNumber-uniqueSparql
		a         sh:SPARQLConstraint ;  
		sh:message "The PowerTransformer has TransformerEnd.endNumber which is not unique or the PowerTransformerEnd with endNumber 1 is not the highest voltage winding." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value
			WHERE {
        {
        SELECT $this (COUNT(DISTINCT ?endnumber) as ?countd) (COUNT(?endnumber) as ?count) (MIN(?endnumber) as ?minendnumber) (MAX(?ratedu) as ?maxratedu) 
        WHERE {
          $this ^cim:PowerTransformerEnd.PowerTransformer ?ends .
          ?ends rdf:type ?endtype .
          ?ends cim:TransformerEnd.endNumber ?endnumber .
          ?ends cim:PowerTransformerEnd.ratedU ?ratedu .
        }
        GROUP BY $this ?endtype
        }
        
        ?end1 cim:PowerTransformerEnd.PowerTransformer $this .
        ?end1 cim:TransformerEnd.endNumber ?minendnumber.
        ?end1 cim:PowerTransformerEnd.ratedU ?end1ratedu .
        
        ?end2 cim:PowerTransformerEnd.PowerTransformer $this .
        ?end2 cim:PowerTransformerEnd.ratedU ?maxratedu .
        BIND("" as ?value).
        FILTER(?countd!=?count || (?countd=?count && ?end1ratedu!=?maxratedu && ?end1!=?end2) ).
			} 
      """ .      

equ:OperationalLimitType.isInfiniteDuration-usage
        a               sh:PropertyShape ;
        sh:sparql       equ:OperationalLimitType.isInfiniteDuration-usageSparql ;
        sh:description  "If false, the limit has definite duration which is defined by the attribute acceptableDuration." ;
        sh:name         "C:301:EQ:OperationalLimitType.isInfiniteDuration:usage" ;
        sh:group        equ:EQ301UML ;
        sh:path         cim:OperationalLimitType.acceptableDuration ;
        sh:order        25 ;
        sh:severity     sh:Violation .
        
    
equ:OperationalLimitType.isInfiniteDuration-usageSparql
		a         sh:SPARQLConstraint ;  
		sh:message "The attribute is not present when .isInfiniteDuration is set ot false." ;
		sh:prefixes cim: ;
		sh:select """
			SELECT  $this ?value
			WHERE {
        #OPTIONAL {$this $PATH ?value }.
        $this $PATH ?value .
        BIND(EXISTS{$this $PATH ?v} AS ?hasvalue).
        $this cim:OperationalLimitType.isInfiniteDuration ?indur .
        FILTER (?hasvalue=false && ?indur=false ) .        
			}""" .      